library(dplyr)
library(tidyr)
library(caret)
git_url<-
"https://raw.githubusercontent.com/GitableGabe/Data621_Data/main/"
df_classif <-
read.csv(paste0(git_url,"classification-output-data.csv"))
head(df_classif,n=10)
ls_class<-factor(df_classif$class)
ls_scr_class<-factor(df_classif$scored.class)
ls_sr_prb<-df_classif$scored.probability
(example<-confusionMatrix(data=ls_scr_class, reference = ls_class))
(confusion_matrix <- table(ls_class,ls_scr_class))
(tp <- confusion_matrix[1, 1])
(tn <- confusion_matrix[2, 2])
(fp <- confusion_matrix[1, 2])
(fn <- confusion_matrix[2, 1])
(accuracy <- (tp + tn)/(tp + fp + tn + fn))
(classification_error_rate <- (fp + fn)/(tp + fp + tn + fn))
(accuracy + classification_error_rate)
(precision <- tp/(tp + fp))
(sensitivity <- tp/(tp + fn))
(specificity <- tn/(tn + fp))
(f1_score <- (2 * precision * sensitivity)/(precision + sensitivity))
# Create a ROC curve object
roc_curve <- roc(ls_class, ls_sr_prb)
# Function to generate ROC curve without external packages
generate_ROC_curve <- function(data, true_class_col, prob_col) {
# Sort data by predicted probabilities in descending order
sorted_data <- data[order(-data[[prob_col]]), ]
# Initialize variables
tp <- 0  # True Positives
fp <- 0  # False Positives
tn <- sum(data[[true_class_col]] == 0)  # True Negatives
fn <- sum(data[[true_class_col]] == 1)  # False Negatives
# Initialize vectors to store True Positive Rate (Sensitivity) and False Positive Rate (1-Specificity)
tpr_vector <- numeric()
fpr_vector <- numeric()
# Iterate through sorted data
for (i in 1:nrow(sorted_data)) {
if (sorted_data[[true_class_col]][i] == 1) {
tp <- tp + 1
fn <- fn - 1
} else {
fp <- fp + 1
tn <- tn - 1
}
# Calculate True Positive Rate (Sensitivity) and False Positive Rate (1-Specificity)
tpr <- tp / (tp + fn)
fpr <- fp / (fp + tn)
# Append to vectors
tpr_vector <- c(tpr_vector, tpr)
fpr_vector <- c(fpr_vector, fpr)
}
# Calculate AUC using trapezoidal rule
auc <- sum(diff(fpr_vector) * tpr_vector[-1])
# Plot ROC curve
plot(fpr_vector, tpr_vector, type = "l", col = "blue", lwd = 2,
main = "ROC Curve", xlab = "False Positive Rate", ylab = "True Positive Rate")
abline(a = 0, b = 1, col = "red", lty = 2)
# Return AUC value
return(auc)
}
# Example usage
# Assuming your data frame is named 'my_data' with columns 'class' and 'scored.probability'
auc_value <- generate_ROC_curve(df_classif, "class", "scored.probability")
cat("AUC:", auc_value, "\n")
# Function to generate ROC curve without external packages
generate_ROC_curve <- function(data, true_class_col, prob_col) {
# Sort data by predicted probabilities in descending order
sorted_data <- data[order(-data[[prob_col]]), ]
# Initialize variables
tp <- 0  # True Positives
fp <- 0  # False Positives
tn <- sum(data[[true_class_col]] == 0)  # True Negatives
fn <- sum(data[[true_class_col]] == 1)  # False Negatives
# Initialize vectors to store True Positive Rate (Sensitivity) and False Positive Rate (1-Specificity)
tpr_vector <- numeric()
fpr_vector <- numeric()
# Calculate True Positive Rate (Sensitivity) and False Positive Rate (1-Specificity)
tpr <- tp / (tp + fn)
fpr <- fp / (fp + tn)
# Append to vectors
tpr_vector <- c(tpr_vector, tpr)
fpr_vector <- c(fpr_vector, fpr)
}
# Calculate AUC using trapezoidal rule
auc <- sum(diff(fpr_vector) * tpr_vector[-1])
# Function to generate ROC curve without external packages
generate_ROC_curve <- function(data, true_class_col, prob_col) {
# Sort data by predicted probabilities in descending order
sorted_data <- data[order(-data[[prob_col]]), ]
# Initialize variables
tp <- 0  # True Positives
fp <- 0  # False Positives
tn <- sum(data[[true_class_col]] == 0)  # True Negatives
fn <- sum(data[[true_class_col]] == 1)  # False Negatives
# Initialize vectors to store True Positive Rate (Sensitivity) and False Positive Rate (1-Specificity)
tpr_vector <- numeric()
fpr_vector <- numeric()
# Calculate True Positive Rate (Sensitivity) and False Positive Rate (1-Specificity)
tpr <- tp / (tp + fn)
fpr <- fp / (fp + tn)
# Append to vectors
tpr_vector <- c(tpr_vector, tpr)
fpr_vector <- c(fpr_vector, fpr)
}
# Calculate AUC using trapezoidal rule
auc <- sum(diff(fpr_vector) * tpr_vector[-1])
# Function to generate ROC curve without external packages
generate_ROC_curve <- function(data, true_class_col, prob_col) {
# Sort data by predicted probabilities in descending order
sorted_data <- data[order(-data[[prob_col]]), ]
# Initialize variables
tp <- 0  # True Positives
fp <- 0  # False Positives
tn <- sum(data[[true_class_col]] == 0)  # True Negatives
fn <- sum(data[[true_class_col]] == 1)  # False Negatives
# Initialize vectors to store True Positive Rate (Sensitivity) and False Positive Rate (1-Specificity)
tpr_vector <- numeric()
fpr_vector <- numeric()
# Iterate through sorted data
for (i in 1:nrow(sorted_data)) {
if (sorted_data[[true_class_col]][i] == 1) {
tp <- tp + 1
fn <- fn - 1
} else {
fp <- fp + 1
tn <- tn - 1
}
# Calculate True Positive Rate (Sensitivity) and False Positive Rate (1-Specificity)
tpr <- tp / (tp + fn)
fpr <- fp / (fp + tn)
# Append to vectors
tpr_vector <- c(tpr_vector, tpr)
fpr_vector <- c(fpr_vector, fpr)
}
# Calculate AUC using trapezoidal rule
auc <- sum(diff(fpr_vector) * tpr_vector[-1])
# Plot ROC curve
plot(fpr_vector, tpr_vector, type = "l", col = "blue", lwd = 2,
main = "ROC Curve", xlab = "False Positive Rate", ylab = "True Positive Rate")
abline(a = 0, b = 1, col = "red", lty = 2)
# Return AUC value
return(auc)
}
# Example usage
# Assuming your data frame is named 'my_data' with columns 'class' and 'scored.probability'
auc_value <- generate_ROC_curve(df_classif, "class", "scored.probability")
cat("AUC:", auc_value, "\n")
?roc
viewCode(pkg="PBSmodelling", funs, output=4, ...)
getMethod (“chol2inv”, “diagonalMatrix”)
library(dplyr)
library(tidyr)
library(caret)
library(ggplot2)
library(pROC)
getMethod (“pROC”, “roc”)
getMethod(pROC, roc)
getMethod("pROC", "roc")
getMethod("roc")
getMethod("roc")
getAnywhere(roc)
getAnywhere(pRoc.roc)
getAnywhere(roc)
getAnywhere(roc)
UseMethod("roc")
?UseMethod("roc")
methods("roc")
methods(roc.formula)
methods("roc.formula")
methods("roc")
getAnywhere(roc.formula)
getAnywhere(roc.test.formula)
getAnywhere(roc.test.formula)
getAnywhere(roc.test)
?methods("roc")
getAnywhere(roc.data.frame)
git_url<-
"https://raw.githubusercontent.com/GitableGabe/Data621_Data/main/"
df_classif <-
read.csv(paste0(git_url,"classification-output-data.csv"))
head(df_classif,n=10)
ls_class<-factor(df_classif$class)
ls_scr_class<-factor(df_classif$scored.class)
ls_sr_prb<-df_classif$scored.probability
(example<-confusionMatrix(data=ls_scr_class, reference = ls_class))
# Function to generate ROC curve without external packages
generate_ROC_curve <- function(data, true_class_col, prob_col) {
# Sort data by predicted probabilities in descending order
sorted_data <- data[order(-data[[prob_col]]), ]
# Initialize variables
tp <- 0  # True Positives
fp <- 0  # False Positives
tn <- sum(data[[true_class_col]] == 0)  # True Negatives
fn <- sum(data[[true_class_col]] == 1)  # False Negatives
# Initialize vectors to store True Positive Rate (Sensitivity) and False Positive Rate (1-Specificity)
tpr_vector <- numeric()
fpr_vector <- numeric()
# Iterate through sorted data
for (i in 1:nrow(sorted_data)) {
if (sorted_data[[true_class_col]][i] == 1) {
tp <- tp + 1
fn <- fn - 1
} else {
fp <- fp + 1
tn <- tn - 1
}
# Calculate True Positive Rate (Sensitivity) and False Positive Rate (1-Specificity)
tpr <- tp / (tp + fn)
fpr <- fp / (fp + tn)
# Append to vectors
tpr_vector <- c(tpr_vector, tpr)
fpr_vector <- c(fpr_vector, fpr)
}
# Calculate AUC using trapezoidal rule
auc <- sum(diff(fpr_vector) * tpr_vector[-1])
# Plot ROC curve
plot(fpr_vector, tpr_vector, type = "l", col = "blue", lwd = 2,
main = "ROC Curve", xlab = "False Positive Rate", ylab = "True Positive Rate")
abline(a = 0, b = 1, col = "red", lty = 2)
# Return AUC value
return(auc)
}
auc_value <- generate_ROC_curve(df_classif, "class", "scored.probability")
cat("AUC:", auc_value, "\n")
# Install and load the required package
library(dplyr)
# Sample DataFrame creation
df <- data.frame(
CarModel = c('ModelA', 'ModelA', 'ModelB', 'ModelB'),
Year = as.Date(c('2020-01-01', '2021-01-01', '2020-01-01', '2021-01-01')),
TotalCarsMade = c(100, 120, 150, 180),
PeoplePurchased = c(50, 60, 70, 80)
)
# Arrange the data by CarModel and Year
df <- df %>% arrange(CarModel, Year)
# Calculate year-over-year percentage change
df <- df %>%
group_by(CarModel) %>%
mutate(
CarsMade_YoY_PctChange = (TotalCarsMade / lag(TotalCarsMade) - 1) * 100,
PeoplePurchased_YoY_PctChange = (PeoplePurchased / lag(PeoplePurchased) - 1) * 100
)
# Print the resulting DataFrame
print(df)
# Pivot the data
df_pivoted <- df %>%
pivot_wider(names_from = CarModel, values_from = c(CarsMade_YoY_PctChange, PeoplePurchased_YoY_PctChange))
# Print the resulting pivoted DataFrame
print(df_pivoted)
git_url<-
"https://raw.githubusercontent.com/GitableGabe/Data621_Data/main/"
df_crime_eval <-
read.csv(paste0(git_url,"crime-evaluation-data_modified.csv"))
head(df_crime_eval,n=10)
library(dplyr)
library(tidyr)
df_crime_eval <-
read.csv(paste0(git_url,"crime-evaluation-data_modified.csv"))
head(df_crime_eval,n=10)
df_crime_train <-
read.csv(paste0(git_url,"crime-training-data_modified.csv"))
head(df_crime_train,n=10)
df_crime_train[is.na(df_crime_train)]
xtabs(~ target + ., data = df_crime_train)
xtabs(~ target + age,  data = df_crime_train)
xtabs(~ target + rad,  data = df_crime_train)
xtabs(~ target + zn,  data = df_crime_train)
str(df_crime_train)
xtabs(~ target + rad,  data = df_crime_train)
xtabs(~ target + zn,  data = df_crime_train)
df_crime_eval
xtabs(~ target + tax ,  data = df_crime_train)
xtabs(~ target + rad,  data = df_crime_train)
xtabs(~ target + indus,  data = df_crime_train)
xtabs(~ target + nox,  data = df_crime_train)
xtabs(~ target + rm,  data = df_crime_train)
xtabs(~ target + tax,  data = df_crime_train)
xtabs(~ target + ptratio,  data = df_crime_train)
df_crime_train$chas <- as.factor(df_crime_train$chas)
df_crime_train$rad <- as.factor(df_crime_train$rad)
df_crime_train$target <- as.factor(df_crime_train$target)
xtabs(~ target + rad ,  data = df_crime_train)
str(df_crime_train)
# Create a correlation matrix for all variables
cor_matrix <- cor(df_crime_train)
df_crime_train <-
read.csv(paste0(git_url,"crime-training-data_modified.csv"))
head(df_crime_train,n=10)
str(df_crime_train)
# Create a correlation matrix for all variables
(cor_matrix <- cor(df_crime_train))
install.packages("car")
library(dplyr)
library(tidyr)
library(car)
# Calculate VIF
(vif_values <- VIF(df_crime_train))
library(dplyr)
library(tidyr)
library(car)
# Calculate VIF
(vif_values <- VIF(df_crime_train))
df_crime_train$chas <- as.factor(df_crime_train$chas)
df_crime_train$rad <- as.factor(df_crime_train$rad)
df_crime_train$target <- as.factor(df_crime_train$target)
str(df_crime_train)
