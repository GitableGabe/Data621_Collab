| TEAM_BATTING_BB 	     | Walks by batters 					 | Positive Impact on Wins |
| TEAM_BATTING_HBP	     | Batters hit by pitch (get a free base)| Positive Impact on Wins |
| TEAM_BATTING_SO 	     | Strikeouts by batters 				 | Negative Impact on Wins |
| TEAM_BASERUN_SB 	     | Stolen bases 						 | Positive Impact on Wins |
| TEAM_BASERUN_CS 	     | Caught stealing 						 | Negative Impact on Wins |
| TEAM_FIELDING_E 	     | Errors 								 | Negative Impact on Wins |
| TEAM_FIELDING_DP	     | Double Plays 						 | Positive Impact on Wins |
| TEAM_PITCHING_BB	     | Walks allowed 						 | Negative Impact on Wins |
| TEAM_PITCHING_H 	     | Hits allowed 						 | Negative Impact on Wins |
| TEAM_PITCHING_HR	     | Homeruns allowed 					 | Negative Impact on Wins |
| TEAM_PITCHING_SO	     | Strikeouts by pitchers 			 	 | Positive Impact on Wins |
"
cat(tabl) # output the table in a format good for HTML/PDF/docx conversion
git_url<-
"https://raw.githubusercontent.com/melbow2424/Data621_HW1/main/"
df_train <-
read.csv(paste0(git_url,"moneyball-training-data.csv"))
df_evaluation <-
read.csv(paste0(git_url,"moneyball-evaluation-data.csv"))
print(skim(df_train))
df_train %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
train_means<-sapply(df_train, function(x) round(mean(x, na.rm = TRUE)))
train_means
eval_means<-sapply(df_evaluation, function(x) round(mean(x, na.rm = TRUE)))
eval_means
train_medians<-sapply(df_train, function(x) round(median(x, na.rm = TRUE)))
train_medians
eval_medians<-sapply(df_evaluation, function(x) round(median(x, na.rm = TRUE)))
eval_medians
# Replace NA values in 'column_name' with 'mean'
df_train_mn <- df_train %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
train_means[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
train_means[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
train_means[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
train_means[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
train_means[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
train_means[17], TEAM_FIELDING_DP))
df_train_mn %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_evaluation_mn <- df_evaluation %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
eval_means[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
eval_means[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
eval_means[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
eval_means[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
eval_means[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
eval_means[17], TEAM_FIELDING_DP))
# Replace NA values in 'column_name' with 'median'
df_train_md <- df_train %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
train_medians[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
train_medians[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
train_medians[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
train_medians[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
train_medians[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
train_medians[17], TEAM_FIELDING_DP))
df_train_md %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_evaluation_md <- df_evaluation %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
eval_medians[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
eval_medians[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
eval_medians[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
eval_medians[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
eval_medians[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
eval_medians[17], TEAM_FIELDING_DP))
df_train_0 <- df_train %>%
replace_na(list(
INDEX = 0,
TARGET_WINS = 0,
TEAM_BATTING_H = 0,
TEAM_BATTING_2B = 0,
TEAM_BATTING_3B = 0,
TEAM_BATTING_HR = 0,
TEAM_BATTING_BB = 0,
TEAM_BATTING_SO = 0,
TEAM_BASERUN_SB = 0,
TEAM_BASERUN_CS = 0,
TEAM_BATTING_HBP = 0,
TEAM_PITCHING_H = 0,
TEAM_PITCHING_HR = 0,
TEAM_PITCHING_BB = 0,
TEAM_PITCHING_SO = 0,
TEAM_FIELDING_E = 0,
TEAM_FIELDING_DP = 0
))
df_train_0 %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_evaluation_0 <- df_evaluation %>%
replace_na(list(
INDEX = 0,
TARGET_WINS = 0,
TEAM_BATTING_H = 0,
TEAM_BATTING_2B = 0,
TEAM_BATTING_3B = 0,
TEAM_BATTING_HR = 0,
TEAM_BATTING_BB = 0,
TEAM_BATTING_SO = 0,
TEAM_BASERUN_SB = 0,
TEAM_BASERUN_CS = 0,
TEAM_BATTING_HBP = 0,
TEAM_PITCHING_H = 0,
TEAM_PITCHING_HR = 0,
TEAM_PITCHING_BB = 0,
TEAM_PITCHING_SO = 0,
TEAM_FIELDING_E = 0,
TEAM_FIELDING_DP = 0
))
df_train_rm<- na.omit(df_train)
df_evaluation_rm<- na.omit(df_evaluation)
df_train_rm %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
#print(skim(df_train_mn))
#print(skim(df_train_md))
#print(skim(df_train_0))
df_train_mn %>%
gather(variable, value, TEAM_BATTING_H: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value, y=TARGET_WINS)) + #plotting every variable
geom_point(color = "grey", alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "darkgreen") +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_train_mn %>%
select(-INDEX) %>%
cor(.,) %>%
corrplot(.,method = "ellipse", type = "lower", diag = FALSE)
model_initial <- lm(TARGET_WINS ~ TEAM_BATTING_H+TEAM_BATTING_2B +TEAM_BATTING_3B+TEAM_BATTING_HR+TEAM_BATTING_BB+TEAM_BATTING_SO+
TEAM_BASERUN_SB+ TEAM_BASERUN_CS + TEAM_BATTING_HBP +TEAM_PITCHING_H+ TEAM_PITCHING_HR+TEAM_PITCHING_BB+TEAM_PITCHING_SO+TEAM_FIELDING_E+ TEAM_FIELDING_DP, data = df_train)
summary(model_initial)
model_initial <- lm(TARGET_WINS ~ TEAM_BATTING_H+TEAM_BATTING_2B +TEAM_BATTING_3B+TEAM_BATTING_HR+TEAM_BATTING_BB+TEAM_BATTING_SO+
TEAM_BASERUN_SB+ TEAM_BASERUN_CS + TEAM_BATTING_HBP +TEAM_PITCHING_H+ TEAM_PITCHING_HR+TEAM_PITCHING_BB+TEAM_PITCHING_SO+TEAM_FIELDING_E+ TEAM_FIELDING_DP, data = df_train_md)
summary(model_initial)
# Keep only specific columns using subset()
df_1 <- subset(df_train_rm, select = c(TARGET_WINS , TEAM_BATTING_H , TEAM_BATTING_2B , TEAM_BATTING_3B, TEAM_BATTING_HR , TEAM_BATTING_BB, TEAM_BATTING_SO , TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_FIELDING_E))
kdepairs(df_1)
# Create a subset that includes all columns
all_columns_subset <- df_train_rm[, ]
kdepairs(all_columns_subset)
model_initial <- lm(TARGET_WINS ~ TEAM_BATTING_H+TEAM_BATTING_2B +TEAM_BATTING_3B+TEAM_BATTING_HR+TEAM_BATTING_BB+TEAM_BATTING_SO+
TEAM_BASERUN_SB+ TEAM_BASERUN_CS + TEAM_BATTING_HBP +TEAM_PITCHING_H+ TEAM_PITCHING_HR+TEAM_PITCHING_BB+TEAM_PITCHING_SO+TEAM_FIELDING_E+ TEAM_FIELDING_DP, data = df_train)
summary(model_initial)
# Initialize variables to store results
best_adjusted_r_squared <- -Inf
best_variable <- ""
# Loop through each independent variable
for (var in names(df_train_md)[-1]) {
# Fit a linear model with the current variable
lm_model <- lm(paste("TARGET_WINS  ~", var), data = df_train_md)
# Get the Adjusted R-squared for the model
adjusted_r_squared <- summary(lm_model)$adj.r.squared
# Check if the current model has a higher Adjusted R-squared
if (adjusted_r_squared > best_adjusted_r_squared) {
best_adjusted_r_squared <- adjusted_r_squared
best_variable <- var
}
}
# Print the results
cat("Best independent variable:", best_variable, "\n")
cat("Best Adjusted R-squared:", best_adjusted_r_squared, "\n")
# Initialize variables for forward selection
included_variables <- character(0)
best_adjusted_r_squared <- -Inf
while (length(included_variables) < length(names(df_train)) - 1) {
remaining_variables <- setdiff(names(df_train)[-1], included_variables)
adjusted_r_squared_values <- numeric(length(remaining_variables))
for (i in seq_along(remaining_variables)) {
# Fit a linear model with the included variables plus one candidate variable
variables_to_include <- c(included_variables, remaining_variables[i])
formula <- paste("TARGET_WINS ~", paste(variables_to_include, collapse = " + "))
lm_model <- lm(formula, data = df_train)
# Get the Adjusted R-squared for the model
adjusted_r_squared <- summary(lm_model)$adj.r.squared
adjusted_r_squared_values[i] <- adjusted_r_squared
}
# Find the index of the variable that gives the maximum increase in Adjusted R-squared
best_variable_index <- which.max(adjusted_r_squared_values)
# If the best Adjusted R-squared is greater than the current best, include the variable
if (adjusted_r_squared_values[best_variable_index] > best_adjusted_r_squared) {
best_adjusted_r_squared <- adjusted_r_squared_values[best_variable_index]
included_variables <- c(included_variables, remaining_variables[best_variable_index])
} else {
# Break the loop if adding a variable doesn't improve the Adjusted R-squared
break
}
}
# Print the selected variables and their Adjusted R-squared
cat("Selected variables:", included_variables, "\n")
cat("Best Adjusted R-squared:", best_adjusted_r_squared, "\n")
formula <- paste("TARGET_WINS ~", paste(included_variables, collapse = " + "))
model_initial2 <- lm(formula, data = df_train)
summary(model_initial)
# Fit a multiple linear regression model using lm
model <- lm(TARGET_WINS ~ ., data = df_train)
# Summary of the regression model
summary(model)
#Also tried to minus it as well. Did not work.
df_train_with_combo <- df_train_rm %>%
mutate(team_H = TEAM_BATTING_H + TEAM_PITCHING_H,
team_HR = TEAM_BATTING_HR + TEAM_PITCHING_HR,
team_BB = TEAM_BATTING_BB + TEAM_PITCHING_BB,
team_SO = TEAM_BATTING_SO + TEAM_PITCHING_SO)%>%
select(-TEAM_BATTING_H, -TEAM_PITCHING_H, -TEAM_BATTING_HR, -TEAM_PITCHING_HR, -TEAM_BATTING_BB,-TEAM_PITCHING_BB,
-TEAM_BATTING_SO,- TEAM_PITCHING_SO)
# Create a subset that includes all columns
all_columns_subset <- df_train_with_combo[, ]
kdepairs(all_columns_subset)
# Fit a multiple linear regression model using lm
model <- lm(TARGET_WINS ~ ., data = df_train_with_combo)
# Summary of the regression model
summary(model)
# Initialize variables for forward selection
included_variables <- character(0)
best_adjusted_r_squared <- -Inf
while (length(included_variables) < length(names(df_train_with_combo)) - 1) {
remaining_variables <- setdiff(names(df_train_with_combo)[-1], included_variables)
adjusted_r_squared_values <- numeric(length(remaining_variables))
for (i in seq_along(remaining_variables)) {
# Fit a linear model with the included variables plus one candidate variable
variables_to_include <- c(included_variables, remaining_variables[i])
formula <- paste("TARGET_WINS ~", paste(variables_to_include, collapse = " + "))
lm_model <- lm(formula, data = df_train_with_combo)
# Get the Adjusted R-squared for the model
adjusted_r_squared <- summary(lm_model)$adj.r.squared
adjusted_r_squared_values[i] <- adjusted_r_squared
}
# Find the index of the variable that gives the maximum increase in Adjusted R-squared
best_variable_index <- which.max(adjusted_r_squared_values)
# If the best Adjusted R-squared is greater than the current best, include the variable
if (adjusted_r_squared_values[best_variable_index] > best_adjusted_r_squared) {
best_adjusted_r_squared <- adjusted_r_squared_values[best_variable_index]
included_variables <- c(included_variables, remaining_variables[best_variable_index])
} else {
# Break the loop if adding a variable doesn't improve the Adjusted R-squared
break
}
}
# Print the selected variables and their Adjusted R-squared
cat("Selected variables:", included_variables, "\n")
cat("Best Adjusted R-squared:", best_adjusted_r_squared, "\n")
formula <- paste("TARGET_WINS ~", paste(included_variables, collapse = " + "))
model_initial2 <- lm(formula, data = df_train_with_combo)
summary(model_initial)
formula <- paste("TARGET_WINS ~", paste(included_variables, collapse = " + "))
model_initial2 <- lm(formula, data = df_train_with_combo)
summary(model_initial)
# Initialize variables for forward selection
included_variables2 <- character(0)
best_adjusted_r_squared <- -Inf
while (length(included_variables2) < length(names(df_train_with_combo)) - 1) {
remaining_variables <- setdiff(names(df_train_with_combo)[-1], included_variables2)
adjusted_r_squared_values <- numeric(length(remaining_variables))
for (i in seq_along(remaining_variables)) {
# Fit a linear model with the included variables plus one candidate variable
variables_to_include <- c(included_variables2, remaining_variables[i])
formula <- paste("TARGET_WINS ~", paste(variables_to_include, collapse = " + "))
lm_model <- lm(formula, data = df_train_with_combo)
# Get the Adjusted R-squared for the model
adjusted_r_squared <- summary(lm_model)$adj.r.squared
adjusted_r_squared_values[i] <- adjusted_r_squared
}
# Find the index of the variable that gives the maximum increase in Adjusted R-squared
best_variable_index <- which.max(adjusted_r_squared_values)
# If the best Adjusted R-squared is greater than the current best, include the variable
if (adjusted_r_squared_values[best_variable_index] > best_adjusted_r_squared) {
best_adjusted_r_squared <- adjusted_r_squared_values[best_variable_index]
included_variables2 <- c(included_variables2, remaining_variables[best_variable_index])
} else {
# Break the loop if adding a variable doesn't improve the Adjusted R-squared
break
}
}
# Print the selected variables and their Adjusted R-squared
cat("Selected variables:", included_variables2, "\n")
cat("Best Adjusted R-squared:", best_adjusted_r_squared, "\n")
formula <- paste("TARGET_WINS ~", paste(included_variables2, collapse = " + "))
model_initial2 <- lm(formula, data = df_train_with_combo)
summary(model_initial)
model_initial <- lm(TARGET_WINS ~ team_H + team_BB + TEAM_FIELDING_E +TEAM_FIELDING_DP+ team_SO+ team_HR+ TEAM_BATTING_HBP+ TEAM_BATTING_3B +TEAM_BASERUN_SB, data = df_train_with_combo)
summary(model_initial)
df_2 <- subset(df_train_rm, select = c(TARGET_WINS, team_H, team_BB, TEAM_FIELDING_E, TEAM_FIELDING_DP, team_SO, team_HR, TEAM_BATTING_HBP, TEAM_BATTING_3B, TEAM_BASERUN_SB))
df_2 <- subset(df_train_with_combo, select = c(TARGET_WINS, team_H, team_BB, TEAM_FIELDING_E, TEAM_FIELDING_DP, team_SO, team_HR, TEAM_BATTING_HBP, TEAM_BATTING_3B, TEAM_BASERUN_SB))
kdepairs(df_2)
model_initial <- lm(TARGET_WINS ~ team_H + team_BB +TEAM_FIELDING_DP+ team_SO+ team_HR+ TEAM_BATTING_HBP+ TEAM_BATTING_3B +TEAM_BASERUN_SB, data = df_train_with_combo)
summary(model_initial)
model_initial <- lm(TARGET_WINS ~ team_H + team_BB + TEAM_FIELDING_E +TEAM_FIELDING_DP+ team_SO+ team_HR+ TEAM_BATTING_HBP +TEAM_BASERUN_SB, data = df_train_with_combo)
summary(model_initial)
model_initial <- lm(TARGET_WINS ~ team_H + team_BB + TEAM_FIELDING_E +TEAM_FIELDING_DP+ team_SO+ team_HR+ TEAM_BATTING_HBP+ TEAM_BATTING_3B +TEAM_BASERUN_SB, data = df_train_with_combo)
summary(model_initial)
# Initialize variables for forward selection
included_variables2 <- character(0)
best_adjusted_r_squared <- 0
while (length(included_variables2) < length(names(df_train_with_combo)) - 1) {
remaining_variables <- setdiff(names(df_train_with_combo)[-1], included_variables2)
adjusted_r_squared_values <- numeric(length(remaining_variables))
for (i in seq_along(remaining_variables)) {
# Fit a linear model with the included variables plus one candidate variable
variables_to_include <- c(included_variables2, remaining_variables[i])
formula <- paste("TARGET_WINS ~", paste(variables_to_include, collapse = " + "))
lm_model <- lm(formula, data = df_train_with_combo)
# Get the Adjusted R-squared for the model
adjusted_r_squared <- summary(lm_model)$adj.r.squared
adjusted_r_squared_values[i] <- adjusted_r_squared
}
# Find the index of the variable that gives the maximum increase in Adjusted R-squared
best_variable_index <- which.max(adjusted_r_squared_values)
# If the best Adjusted R-squared is greater than the current best, include the variable
if (adjusted_r_squared_values[best_variable_index] > best_adjusted_r_squared) {
best_adjusted_r_squared <- adjusted_r_squared_values[best_variable_index]
included_variables2 <- c(included_variables2, remaining_variables[best_variable_index])
} else {
# Break the loop if adding a variable doesn't improve the Adjusted R-squared
break
}
}
# Print the selected variables and their Adjusted R-squared
cat("Selected variables:", included_variables2, "\n")
cat("Best Adjusted R-squared:", best_adjusted_r_squared, "\n")
# Initialize variables for forward selection
included_variables2 <- character(0)
best_adjusted_r_squared <- -Inf
while (length(included_variables2) < length(names(df_train_with_combo)) - 1) {
remaining_variables <- setdiff(names(df_train_with_combo)[-1], included_variables2)
adjusted_r_squared_values <- numeric(length(remaining_variables))
for (i in seq_along(remaining_variables)) {
# Fit a linear model with the included variables plus one candidate variable
variables_to_include <- c(included_variables2, remaining_variables[i])
formula <- paste("TARGET_WINS ~", paste(variables_to_include, collapse = " + "))
lm_model <- lm(formula, data = df_train_with_combo)
# Get the Adjusted R-squared for the model
adjusted_r_squared <- summary(lm_model)$adj.r.squared
adjusted_r_squared_values[i] <- adjusted_r_squared
}
# Find the index of the variable that gives the maximum increase in Adjusted R-squared
best_variable_index <- which.max(adjusted_r_squared_values)
# If the best Adjusted R-squared is greater than the current best, include the variable
if (adjusted_r_squared_values[best_variable_index] > best_adjusted_r_squared) {
best_adjusted_r_squared <- adjusted_r_squared_values[best_variable_index]
included_variables2 <- c(included_variables2, remaining_variables[best_variable_index])
} else {
# Break the loop if adding a variable doesn't improve the Adjusted R-squared
break
}
}
# Print the selected variables and their Adjusted R-squared
cat("Selected variables:", included_variables2, "\n")
cat("Best Adjusted R-squared:", best_adjusted_r_squared, "\n")
# Initialize variables for forward selection
included_variables2 <- character(0)
best_adjusted_r_squared <- 0
while (length(included_variables2) < length(names(df_train_with_combo)) - 1) {
remaining_variables <- setdiff(names(df_train_with_combo)[-1], included_variables2)
adjusted_r_squared_values <- numeric(length(remaining_variables))
for (i in seq_along(remaining_variables)) {
# Fit a linear model with the included variables plus one candidate variable
variables_to_include <- c(included_variables2, remaining_variables[i])
formula <- paste("TARGET_WINS ~", paste(variables_to_include, collapse = " + "))
lm_model <- lm(formula, data = df_train_with_combo)
# Get the Adjusted R-squared for the model
adjusted_r_squared <- summary(lm_model)$adj.r.squared
adjusted_r_squared_values[i] <- adjusted_r_squared
}
# Find the index of the variable that gives the maximum increase in Adjusted R-squared
best_variable_index <- which.max(adjusted_r_squared_values)
# If the best Adjusted R-squared is greater than the current best, include the variable
if (adjusted_r_squared_values[best_variable_index] > best_adjusted_r_squared) {
best_adjusted_r_squared <- adjusted_r_squared_values[best_variable_index]
included_variables2 <- c(included_variables2, remaining_variables[best_variable_index])
} else {
# Break the loop if adding a variable doesn't improve the Adjusted R-squared
break
}
}
# Print the selected variables and their Adjusted R-squared
cat("Selected variables:", included_variables2, "\n")
cat("Best Adjusted R-squared:", best_adjusted_r_squared, "\n")
# Fit a multiple linear regression model using lm with all variables:mean
model_mn <- lm(TARGET_WINS ~ ., data = df_train_with_combo)
# Summary of the regression model
summary(model_mn)$adj.r.squared
# Fit a multiple linear regression model using lm with all variables:mean
model_mn <- lm(TARGET_WINS ~ ., data = df_train_mn)
# Summary of the regression model
summary(model_mn)$adj.r.squared
# Fit a multiple linear regression model using lm with all variables:median
model_md <- lm(TARGET_WINS ~ ., data = df_train_md)
# Summary of the regression model
summary(model_md)$adj.r.squared
# Fit a multiple linear regression model using lm with all variables:median
model_md <- lm(TARGET_WINS ~ ., data = df_train_md)
# Summary of the regression model
summary(model_md)$adj.r.squared
# Fit a multiple linear regression model using lm with all variables:median
model_0 <- lm(TARGET_WINS ~ ., data = df_train_0)
# Summary of the regression model
summary(model_0)$adj.r.squared
# Fit a multiple linear regression model using lm with variables: removed
model_rm <- lm(TARGET_WINS ~ ., data = df_train_rm)
# Summary of the regression model
summary(model_rm)$adj.r.squared
# Fit a multiple linear regression model using lm with variables imputed:mean
model_mn <- lm(TARGET_WINS ~ ., data = df_train_mn)
# Summary of the regression model
summary(model_mn)$f.statistic
summary(model_mn)$adj.r.squared
# Fit a multiple linear regression model using lm with variables imputed:mean
model_mn <- lm(TARGET_WINS ~ ., data = df_train_mn)
# Summary of the regression model
summary(model_mn)$p.value
summary(model_mn)$adj.r.squared
# Fit a multiple linear regression model using lm with variables imputed:mean
model_mn <- lm(TARGET_WINS ~ ., data = df_train_mn)
# Summary of the regression model
summary(model_mn)$$fstatistic
# Fit a multiple linear regression model using lm with variables imputed:mean
model_mn <- lm(TARGET_WINS ~ ., data = df_train_mn)
# Summary of the regression model
summary(model_mn)$fstatistic
summary(model_mn)$adj.r.squared
model_initial <- lm(TARGET_WINS ~ TEAM_BATTING_H+TEAM_BATTING_2B +TEAM_BATTING_3B+TEAM_BATTING_HR+TEAM_BATTING_BB+TEAM_BATTING_SO+
TEAM_BASERUN_SB+ TEAM_BASERUN_CS + TEAM_BATTING_HBP +TEAM_PITCHING_H+ TEAM_PITCHING_HR+TEAM_PITCHING_BB+TEAM_PITCHING_SO+TEAM_FIELDING_E+ TEAM_FIELDING_DP, data = df_train_mn)
summary(model_initial)
# Fit a multiple linear regression model using lm with variables imputed:mean
model_mn <- lm(TARGET_WINS ~ ., data = df_train_mn)
# Summary of the regression model
summary(model_mn)$fstatistic.value
summary(model_mn)$adj.r.squared
# Fit a multiple linear regression model using lm with variables imputed:mean
model_mn <- lm(TARGET_WINS ~ ., data = df_train_mn)
# Summary of the regression model
summary(model_mn)$adj.r.squared
# Create a subset that includes all columns
all_columns_subset <- df_train_rm[, ]
kdepairs(all_columns_subset)
# Fit a multiple linear regression model using lm with variables: removed
model_combo <- lm(TARGET_WINS ~ ., data = df_train_with_combo)
# Summary of the regression model
summary(model_combo)$adj.r.squared
# Create a subset that includes all columns
all_columns_subset <- df_train_with_combo[, ]
kdepairs(all_columns_subset)
model <- lm(TARGET_WINS ~ team_H + team_BB + TEAM_FIELDING_E +TEAM_FIELDING_DP+ team_SO+ team_HR+ TEAM_BATTING_HBP+ TEAM_BATTING_3B +TEAM_BASERUN_SB, data = df_train_with_combo)
summary(model)
model <- lm(TARGET_WINS ~ team_H + team_BB + TEAM_FIELDING_E +TEAM_FIELDING_DP+ team_SO+ team_HR+ TEAM_BATTING_HBP+ TEAM_BATTING_3B +TEAM_BASERUN_SB+ TEAM_BASERUN_CS, data = df_train_with_combo)
summary(model)
model <- lm(TARGET_WINS ~ team_H + team_BB + TEAM_FIELDING_E +TEAM_FIELDING_DP+ team_SO+ team_HR+ TEAM_BATTING_HBP+ TEAM_BATTING_3B +TEAM_BASERUN_SB, data = df_train_with_combo)
summary(model)
