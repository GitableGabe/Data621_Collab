"effect the payout if there is a crash"),
paste("Commercial vehicles are driven more, so might ",
"increase probability of collision"),
paste("The more claims you filed in the past, the more you are ",
"likely to file in the future"),
paste("Unknown effect, but in theory more educated people ",
"tend to drive more safely"),
"Unknown effect",
"In theory, home owners tend to drive more responsibly",
"In theory, rich people tend to get into fewer crashes",
"In theory, white collar jobs tend to be safer",
paste("When teenagers drive your car, you are more likely to",
" get into crashes"),
"In theory, married people drive more safely",
paste("If you get lots of traffic tickets, you tend to get",
" into more crashes"),
paste("If your total payout over the past five years ",
"was high, this suggests future payouts will be high"),
"Unknown effect",
paste("Urban legend says that red cars (especially red ",
"sports cars) are more risky. Is that true?"),
paste("If your license was revoked in the past 7 years, ",
"you probably are a more risky driver."),
paste("Urban legend says that women have less crashes",
" then men. Is that true?"),
paste("People who have been customers for a long time",
" are usually more safe."),
"Long drives to work usually suggest greater risk",
"Unknown",
"People who stay at a job for a long time are usually more safe")
df_overview <- data.frame(column1 = ls_c1,
Definition = ls_c2,
column3 = ls_c3)%>%
rename(`Variable Names` = column1,
`Theoretical Effect` = column3)
df_overview%>%
kable()%>%
kable_styling(latex_options = c('scale_down','HOLD_position'))
rm(ls_c1,ls_c2,ls_c3,df_overview)
url_git <- "https://raw.githubusercontent.com/GitableGabe/Data621_Data/main/"
df_insur_eval <-
read.csv(paste0(url_git,"insurance-evaluation-data.csv"))
head(df_insur_eval,n=10)
df_insur_train <-
read.csv(paste0(url_git,"insurance_training_data.csv"))
head(df_insur_eval,n=10)
View(df_insur_eval)
View(df_insur_eval)
View(df_insur_train)
rm(ls_c1,ls_c2,ls_c3,df_overview)
# Gather the data into a long format
data_long <- gather(df_insur_train, key = "Variable", value = "Value")
ggplot(data_long, aes(x = Value)) +
geom_histogram() +
facet_wrap(~Variable, scales = "free") +
labs(title = "Histogram of Variables")
library('dplyr')
library('tidyverse')
library('kableExtra')
#Added
library(ggplot2)
# Gather the data into a long format
data_long <- gather(df_insur_train, key = "Variable", value = "Value")
ggplot(data_long, aes(x = Value)) +
geom_histogram() +
facet_wrap(~Variable, scales = "free") +
labs(title = "Histogram of Variables")
df_insur_train <-
read.csv(paste0(url_git,"insurance_training_data.csv"))
head(df_insur_eval,n=10)
# Gather the data into a long format
data_long <- gather(df_insur_train, key = "Variable", value = "Value")
ggplot(data_long, aes(x = Value)) +
geom_histogram() +
facet_wrap(~Variable, scales = "free") +
labs(title = "Histogram of Variables")
# Fit a linear regression model with all variables
lm_model <- lm(y ~ ., data = df_insur_train)
# Fit a linear regression model with all variables
lm_model <- lm(TARGET_AMT ~ ., data = df_insur_train)
# Extract residuals
residuals_all <- residuals(lm_model)
# Plot residuals for each predictor variable
par(mfrow = c(2, 2))  # Set up a 2x2 grid for subplots
for (variable in names(df_insur_train)) {
if (variable != "y") {  # Exclude the response variable
plot(df_insur_train[[variable]], residuals_all,
main = paste("Residuals vs", variable),
xlab = variable, ylab = "Residuals")
}
}
library('dplyr')
library('kableExtra')
library(tidyverse)
library(ggplot2)
library(Hmisc)
library(corrplot)
library(psych)
library(car)
library(caret)
options(scipen = 999)
ls_c1 <-c("INDEX", "TARGET_FLAG", "TARGET_AMT", "AGE", "BLUEBOOK", "CAR_AGE",
"CAR_TYPE", "CAR_USE", "CLM_FREQ #", "EDUCATION", "HOMEKIDS #",
"HOME_VAL", "INCOME", "JOB","KIDSDRIV #", "MSTATUS", "MVR_PTS",
"OLDCLAIM", "PARENT1", "RED_CAR", "REVOKED", "SEX Gender", "TIF",
"TRAVTIME", "URBANICITY", "YOJ")
ls_c2 <- c("Identification Variable (do not use)",
"Was Car in a crash? 1=YES 0=NO",
"If car was in a crash, what was the cost",
"Age of Driver", "Value of Vehicle", "Vehicle Age", "Type of Car",
"Vehicle Use", "Claims (Past 5 Years)", "Max Education Level",
"Children at Home", "Home Value", "Income",
"Category", "Driving Children", "Marital Status",
"Motor Vehicle Record Points", "Total Claims (Past 5 Years)",
"Single Parent", "A Red Car", "License Revoked (Past 7 Years)",
"Gender", "Time in Force", "Distance to Work", "Home/Work Area",
"Years on Job")
ls_c3 <- c("None", "None", "None",
"Very young people tend to be risky. Maybe very old people also.",
paste("Unknown effect on probability of collision, but probably ",
"effect the payout if there is a crash"),
paste("Unknown effect on probability of collision, but probably ",
"effect the payout if there is a crash"),
paste("Unknown effect on probability of collision, but probably ",
"effect the payout if there is a crash"),
paste("Commercial vehicles are driven more, so might ",
"increase probability of collision"),
paste("The more claims you filed in the past, the more you are ",
"likely to file in the future"),
paste("Unknown effect, but in theory more educated people ",
"tend to drive more safely"),
"Unknown effect",
"In theory, home owners tend to drive more responsibly",
"In theory, rich people tend to get into fewer crashes",
"In theory, white collar jobs tend to be safer",
paste("When teenagers drive your car, you are more likely to",
" get into crashes"),
"In theory, married people drive more safely",
paste("If you get lots of traffic tickets, you tend to get",
" into more crashes"),
paste("If your total payout over the past five years ",
"was high, this suggests future payouts will be high"),
"Unknown effect",
paste("Urban legend says that red cars (especially red ",
"sports cars) are more risky. Is that true?"),
paste("If your license was revoked in the past 7 years, ",
"you probably are a more risky driver."),
paste("Urban legend says that women have less crashes",
" then men. Is that true?"),
paste("People who have been customers for a long time",
" are usually more safe."),
"Long drives to work usually suggest greater risk",
"Unknown",
"People who stay at a job for a long time are usually more safe")
df_overview <- data.frame(column1 = ls_c1,
Definition = ls_c2,
column3 = ls_c3)%>%
rename(`Variable Names` = column1,
`Theoretical Effect` = column3)
df_overview%>%
kable()%>%
kable_styling(latex_options = c('scale_down','HOLD_position'))%>%
column_spec(3, width = "20em")
rm(ls_c1,ls_c2,ls_c3,df_overview)
url_git <- "https://raw.githubusercontent.com/GitableGabe/Data621_Data/main/"
df_insur_eval <-
read.csv(paste0(url_git,"insurance-evaluation-data.csv"))
head(df_insur_eval)
df_insur_train <-
read.csv(paste0(url_git,"insurance_training_data.csv"))
head(df_insur_train)
dim(df_insur_train)
df_insur_train <- df_insur_train %>%
select(-INDEX)
df_insur_eval <- df_insur_eval %>%
select(-INDEX)
df_insur_train <- df_insur_train %>%
mutate(INCOME = gsub("\\$", "", INCOME), HOME_VAL = gsub("\\$", "", HOME_VAL),
BLUEBOOK = gsub("\\$", "", BLUEBOOK), OLDCLAIM = gsub("\\$", "",
OLDCLAIM)) %>%
mutate(INCOME = gsub(",", "", INCOME), HOME_VAL = gsub(",", "", HOME_VAL),
BLUEBOOK = gsub(",", "", BLUEBOOK), OLDCLAIM = gsub(",", "",
OLDCLAIM)) %>%
mutate(INCOME = as.numeric(INCOME), HOME_VAL = as.numeric(HOME_VAL),
BLUEBOOK = as.numeric(BLUEBOOK), OLDCLAIM = as.numeric(OLDCLAIM))
df_insur_train <- df_insur_train %>%
mutate(MSTATUS = gsub("z_","", MSTATUS), SEX = gsub("z_","", SEX),
EDUCATION = gsub("z_","", EDUCATION), JOB = gsub("z_","", JOB),
CAR_TYPE = gsub("z_","", CAR_TYPE), URBANICITY = gsub("z_","",
URBANICITY))
df_insur_eval <- df_insur_eval %>%
mutate(INCOME = gsub("\\$", "", INCOME), HOME_VAL = gsub("\\$", "", HOME_VAL),
BLUEBOOK = gsub("\\$", "", BLUEBOOK), OLDCLAIM = gsub("\\$", "",
OLDCLAIM)) %>%
mutate(INCOME = gsub(",", "", INCOME), HOME_VAL = gsub(",", "", HOME_VAL),
BLUEBOOK = gsub(",", "", BLUEBOOK), OLDCLAIM = gsub(",", "",
OLDCLAIM)) %>%
mutate(INCOME = as.numeric(INCOME), HOME_VAL = as.numeric(HOME_VAL),
BLUEBOOK = as.numeric(BLUEBOOK), OLDCLAIM = as.numeric(OLDCLAIM))
df_insur_eval <- df_insur_eval %>%
mutate(MSTATUS = gsub("z_","", MSTATUS), SEX = gsub("z_","", SEX),
EDUCATION = gsub("z_","", EDUCATION), JOB = gsub("z_","", JOB),
CAR_TYPE = gsub("z_","", CAR_TYPE), URBANICITY = gsub("z_","",
URBANICITY))
df_insur_train <- df_insur_train %>%
mutate(JOB = ifelse(JOB=="Blue Collar", "Blue Collar",
ifelse(JOB=="Student" | JOB=="Home Maker",
"None",
"White Collar")))
df_insur_eval <- df_insur_eval %>%
mutate(JOB = ifelse(JOB=="Blue Collar", "Blue Collar",
ifelse(JOB=="Student" | JOB=="Home Maker",
"None", "White Collar")))
df_insur_train <- df_insur_train %>%
mutate(KIDSDRIV = ifelse(KIDSDRIV >= 1, 1, 0))
df_insur_eval <- df_insur_eval %>%
mutate(KIDSDRIV = ifelse(KIDSDRIV >= 1, 1, 0))
df_insur_train <- df_insur_train %>%
mutate(MSTATUS = ifelse(MSTATUS == "No", "0", "1"),
PARENT1 = ifelse(PARENT1 == "No", "0", "1"),
RED_CAR = ifelse(RED_CAR == "no", "0", "1"),
REVOKED = ifelse(REVOKED == "No", "0", "1"))
df_insur_eval <- df_insur_eval %>%
mutate(MSTATUS = ifelse(MSTATUS == "No", "0", "1"),
PARENT1 = ifelse(PARENT1 == "No", "0", "1"),
RED_CAR = ifelse(RED_CAR == "no", "0", "1"),
REVOKED = ifelse(REVOKED == "No", "0", "1"))
df_insur_train <- df_insur_train %>%
mutate(URBANICITY = ifelse(URBANICITY == "Highly Urban/ Urban",
"Urban", "Rural")) %>%
mutate(EDUCATION = factor(EDUCATION,levels = c("<High School",
"High School",
"Bachelors",
"Masters",
"PhD")))
df_insur_eval <- df_insur_eval %>%
mutate(URBANICITY = ifelse(URBANICITY == "Highly Urban/ Urban",
"Urban", "Rural")) %>%
mutate(EDUCATION = factor(EDUCATION,levels = c("<High School",
"High School",
"Bachelors",
"Masters",
"PhD")))
#loop to count the NAs for each column
for (i in colnames(df_insur_train)){
print(paste(i,"  ", sum(is.na(df_insur_train[,i])),sep = ""))
}
df_insur_train <- df_insur_train %>%
mutate(AGE = ifelse(is.na(AGE),
median(AGE, na.rm = TRUE),
AGE), YOJ = ifelse(is.na(YOJ),
median(YOJ, na.rm = TRUE), YOJ),
CAR_AGE = ifelse(is.na(CAR_AGE),
median(CAR_AGE, na.rm = TRUE), CAR_AGE),
HOME_VAL = ifelse(is.na(HOME_VAL),
median(HOME_VAL,
na.rm = TRUE), HOME_VAL),
INCOME = ifelse(is.na(INCOME),
median(INCOME, na.rm = TRUE),
INCOME)) %>%
mutate(CAR_AGE = ifelse(CAR_AGE < 0, 0, CAR_AGE))
summary(df_insur_train$CAR_AGE)
#loop to count the NAs for each column
for (i in colnames(df_insur_eval)){
print(paste(i,"  ", sum(is.na(df_insur_eval[,i])),sep = ""))
}
df_insur_eval <- df_insur_eval %>%
mutate(AGE = ifelse(is.na(AGE), median(AGE, na.rm = TRUE),
AGE), YOJ = ifelse(is.na(YOJ),
median(YOJ, na.rm = TRUE), YOJ),
CAR_AGE = ifelse(is.na(CAR_AGE), median(CAR_AGE, na.rm = TRUE),
CAR_AGE)) %>%
mutate(INCOME = ifelse(is.na(INCOME), median(INCOME,
na.rm = TRUE), INCOME),
HOME_VAL = ifelse(is.na(HOME_VAL),
median(HOME_VAL, na.rm = TRUE), YOJ))
summary(df_insur_eval$CAR_AGE)
df_insur_train %>%
select(TARGET_AMT, AGE, YOJ, INCOME, HOME_VAL, TRAVTIME, BLUEBOOK, TIF,
OLDCLAIM, CLM_FREQ, MVR_PTS, CAR_AGE, HOMEKIDS) %>%
describe()
df_insur_train %>%
select(TARGET_AMT, AGE, YOJ, INCOME, HOME_VAL, TRAVTIME, BLUEBOOK,
TIF, OLDCLAIM, CLM_FREQ, MVR_PTS, CAR_AGE, HOMEKIDS) %>%
gather() %>%
ggplot(aes(x = value)) +
geom_histogram(fill = "cadetblue") +
facet_wrap(~key, scales = "free")
df_insur_train %>%
select(TARGET_FLAG, KIDSDRIV, PARENT1, MSTATUS, SEX, EDUCATION,
JOB, CAR_USE, CAR_TYPE, RED_CAR, REVOKED, URBANICITY) %>%
gather() %>%
ggplot(aes(x = value)) +
geom_bar(fill = "cadetblue") +
coord_flip()+
facet_wrap(~key, scales = "free")
mat <- df_insur_train %>%
select(-CAR_TYPE, -CAR_USE, -EDUCATION, -JOB, -SEX, -URBANICITY) %>%
mutate(PARENT1 = as.numeric(PARENT1), MSTATUS = as.numeric(MSTATUS),
RED_CAR = as.numeric(RED_CAR), REVOKED = as.numeric(REVOKED)) %>%
cor()
corrplot(mat, method = "circle", diag = FALSE, order ="hclust", type = "lower")
log_mod <- glm(TARGET_FLAG ~., data = df_insur_train[,-2],
family = binomial(link = "logit"))
summary(log_mod)
vif(log_mod)
log_step <- step(log_mod, direction = "backward", test = "LRT")
summary(log_step)
df_insur_train$log_pred_prob <- predict(log_step,
newdata = df_insur_train[,-c(1:2)],
type = "response")
df_insur_train$log_pred <- ifelse(df_insur_train$log_pred_prob > 0.5, 1, 0)
pROC::auc(df_insur_train$TARGET_FLAG, df_insur_train$log_pred)
pROC::roc(df_insur_train$TARGET_FLAG~df_insur_train$log_pred,
plot = TRUE, print.auc = TRUE)
confusionMatrix(as.factor(df_insur_train$log_pred),
as.factor(df_insur_train$TARGET_FLAG), positive = "1")
df_insur_eval$log_pred_prob <- predict(log_step,
newdata = df_insur_eval[,-c(1:2)],
type = "response")
df_insur_eval$log_pred <- ifelse(df_insur_eval$log_pred_prob > 0.5, 1, 0)
df_insur_eval %>%
select(log_pred, KIDSDRIV, PARENT1, MSTATUS, EDUCATION, CAR_TYPE,
REVOKED, URBANICITY, HOMEKIDS) %>%
mutate_if(is.character, as.factor) %>%
mutate_if(is.numeric, as.factor) %>%
pivot_longer(-log_pred, names_to = "key", values_to = "value") %>%
ggplot(aes(x = value, fill = log_pred)) +
geom_bar() +
scale_fill_discrete(labels = c("no crash", "crash"),
name = "Predicted Outcome") +
coord_flip()+
facet_wrap(~key, scales = "free")
df_insur_eval %>%
select(log_pred, INCOME, HOME_VAL, TRAVTIME, TIF, OLDCLAIM,
CLM_FREQ, MVR_PTS, BLUEBOOK) %>%
pivot_longer(-log_pred, names_to = "key", values_to = "value") %>%
ggplot(aes(y = value, x = as.factor(log_pred), fill = as.factor(log_pred))) +
geom_boxplot() +
scale_fill_discrete(labels = c("no crash", "crash"),
name = "Predicted Outcome") +
xlab("Predicted Outcome")+
facet_wrap(~key, scales = "free")
mlr_mod <- lm(TARGET_AMT ~., data = df_insur_train[,-c(1,26:27)])
summary(mlr_mod)
vif(mlr_mod)
mlr_step <- step(mlr_mod, direction = "backward", test = "F")
mlr_final <- lm(TARGET_AMT ~ KIDSDRIV + INCOME + PARENT1 + MSTATUS +
TRAVTIME + CAR_USE + TIF + CAR_TYPE + CLM_FREQ + REVOKED +
MVR_PTS + CAR_AGE + URBANICITY,
data = df_insur_train[,-c(1, 26:27)])
summary(mlr_final)
plot(mlr_final)
df_insur_train$mlr_pred <- predict(mlr_final,
newdata = df_insur_train[,-c(1:2, 26:27)],
type = "response")
RMSE(df_insur_train$mlr_pred, df_insur_train$TARGET_AMT)
summary(mlr_final)$adj.r.squared
df_insur_eval$mlr_pred <- predict(mlr_final,
newdata = df_insur_eval[,-c(1:2, 26:27)],
type = "response")
coef(mlr_final)
df_insur_eval %>%
select(mlr_pred, INCOME, HOME_VAL, TRAVTIME, TIF, CLM_FREQ, MVR_PTS,
CAR_AGE) %>%
mutate_if(is.character, as.numeric) %>%
pivot_longer(-mlr_pred, names_to = "key", values_to = "value") %>%
ggplot(aes(x = value, y = mlr_pred)) +
geom_point() +
geom_smooth() +
ylab("Predicted Claim Amount USD")+
facet_wrap(~key, scales = "free")
df_insur_eval %>%
select(mlr_pred, KIDSDRIV, MSTATUS, CAR_TYPE, REVOKED, URBANICITY, CAR_USE,
PARENT1) %>%
mutate_if(is.numeric, as.character) %>%
pivot_longer(-mlr_pred, names_to = "key", values_to = "value") %>%
mutate(mlr_pred = as.numeric(mlr_pred)) %>%
ggplot(aes(x = mlr_pred, y = value)) +
geom_boxplot(fill = "cadetblue") +
xlab("Predicted Claim Amount USD") +
facet_wrap(~key, scales = "free")
# Fit a linear regression model with all variables
lm_model <- lm(TARGET_AMT ~ ., data = df_insur_train)
# Extract residuals
residuals_all <- residuals(lm_model)
# Plot residuals for each predictor variable
par(mfrow = c(2, 2))  # Set up a 2x2 grid for subplots
for (variable in names(df_insur_train)) {
if (variable != "TARGET_AMT") {  # Exclude the response variable
plot(df_insur_train[[variable]], residuals_all,
main = paste("Residuals vs", variable),
xlab = variable, ylab = "Residuals")
}
}
library('dplyr')
library('tidyverse')
library('kableExtra')
#Added
library(ggplot2)
library(MASS)   # For negative binomial regression
library(pscl)   # For hurdle and zero-inflated models
library(Metrics) # For model evaluation metrics
library(skimr)
ls_c1 <-c("INDEX", "TARGET","","", "AcidIndex", "Alcohol",
"Chlorides", "CitricAcid", "Density", "FixedAcidity",
"FreeSulfurDioxide", "LabelAppeal", "ResidualSugar", "STARS",
"Sulphates", "TotalSulfurDioxide", "VolatileAcidity", "pH")
ls_c2 <- c("Identification Variable (do not use)",
"Number of Cases Purchased","","",
paste("Proprietary method of testing total acidity of wine by",
" using a weighted average"),
"Alcohol Content", "Chloride content of wine", "Citric Acid Content",
"Density of Wine", "Fixed Acidity of Wine",
"Sulfur Dioxide content of wine",
paste("Marketing Score indicating the appeal of label design for",
" consumers. High numbers suggest customers like the label",
" design. Negative numbers suggest customes don't like the",
" design."),
"Residual Sugar of wine",
paste("Wine rating by a team of experts.",
" 4 Stars = Excellent, 1 Star = Poor"),
"Sulfate conten of wine","Total Sulfur Dioxide of Wine",
"Volatile Acid content of wine", "pH of wine")
ls_c3 <- c("None", "None","","", "", "", "", "", "", "", "",
paste("Many consumers purchase based on the visual appeal of",
" the wine label design. Higher numbers suggest better",
" sales."),
"", "A high number of stars suggests high sales", "", "", "", "")
df_overview <- data.frame(column1 = ls_c1,
DEFINITION = ls_c2,
column3 = ls_c3)%>%
rename(`VARIABLE NAME` = column1,
`THEORETICAL EFFECT` = column3)
df_overview%>%
kable()%>%
kable_styling(latex_options = c('scale_down','HOLD_position'))%>%
column_spec(2, width = "20em")%>%
column_spec(3, width = "20em")
rm(ls_c1,ls_c2,ls_c3,df_overview)
url_git <- "https://raw.githubusercontent.com/GitableGabe/Data621_Data/main/"
df_wine_eval <-
read.csv(paste0(url_git,"wine-evaluation-data.csv"))
head(df_wine_eval)
df_wine_train <-
read.csv(paste0(url_git,"wine-training-data.csv"))
head(df_wine_train)
print(skim(df_wine_train))
summary(df_wine_train)
print(skim(df_wine_eval))
summary(df_wine_eval)
# Gather the data into a long format
data_long <- gather(df_wine_train, key = "Variable", value = "Value")
ggplot(data_long, aes(x = Value)) +
geom_histogram() +
facet_wrap(~Variable, scales = "free") +
labs(title = "Histogram of Variables")
# Create a correlation matrix for all variables
(cor_matrix <- cor(df_wine_train, use='complete.obs'))
df_wine_train %>%
mutate(STARS = as.factor(STARS),
TARGET = as.factor(TARGET)) %>%
ggplot(aes(STARS)) +
geom_bar(aes(fill = TARGET)) +
scale_fill_brewer(palette = "RdYlGn")
df_wine_train_transformed <- df_wine_train %>%
mutate(STARS = replace(STARS, is.na(STARS) , 0))
df_wine_eval_transformed  <- df_wine_eval %>%
mutate(STARS = replace(STARS, is.na(STARS) , 0))
# Plot a histogram
hist(df_wine_train$TARGET, main = "Histogram of TARGET", xlab = "TARGET",
col = "skyblue", border = "black")
# Calculate the percentage of unique values in the TARGET variable
target_table <- table(df_wine_train$TARGET)
target_percentage <- prop.table(target_table) * 100
rounded_percentage <- round(target_percentage, 2)
print(rounded_percentage)
set.seed(100)
n <- nrow(df_wine_train_transformed)
train_index <- sample(1:n, 0.8 * n)  # 80% for training, 20% for testing
df_train <- df_wine_train_transformed[train_index, ]
df_test <- df_wine_train_transformed[-train_index, ]
poisson_model <- glm(TARGET ~ LabelAppeal + AcidIndex + STARS, data = df_train,
family = poisson)
#summary(poisson_model)
poisson_preds <- predict(poisson_model, newdata = df_test, type = "response")
poisson_rmse <- sqrt(mean((poisson_preds - df_test$TARGET)^2))
neg_binom_model <- glm.nb(TARGET ~ LabelAppeal + AcidIndex + STARS,
data = df_train)
#summary(neg_binom_model)
neg_binom_preds <- predict(neg_binom_model, newdata = df_test,
type = "response")
neg_binom_rmse <- sqrt(mean((neg_binom_preds - df_test$TARGET)^2))
hurdle_poisson_model <- hurdle(TARGET ~ LabelAppeal + AcidIndex + STARS,
data = df_train, dist = "poisson")
#summary(hurdle_poisson_model)
hurdle_preds <- predict(hurdle_poisson_model, newdata = df_test,
type = "response")
hurdle_rmse <- sqrt(mean((hurdle_preds - df_test$TARGET)^2))
zip_model <- zeroinfl(TARGET ~ LabelAppeal + AcidIndex + STARS | 1,
data = df_train, dist = "poisson")
summary(zip_model)
zip_preds <- predict(zip_model, newdata = df_test, type = "response")
zip_rmse <- sqrt(mean((zip_preds - df_test$TARGET)^2))
comparison <- data.frame(
Model = c("Poisson", "Negative Binomial", "Hurdle Poisson",
"Zero-Inflated Poisson"),
RMSE = c(poisson_rmse, neg_binom_rmse, hurdle_rmse, zip_rmse)
)
print(comparison)
eval_preds <- predict(hurdle_poisson_model,
newdata = df_wine_eval_transformed, type = "response")
