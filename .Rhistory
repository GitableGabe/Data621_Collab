# Check if any number within the range is an outlier
within_range <- sorted_numbers >= lower_bound & sorted_numbers <= upper_bound
outliers_within_range <- sorted_numbers[within_range]
# Add outliers within range to the potential outliers vector
potential_outliers <- c(potential_outliers, outliers_within_range)
}
numbers <- c(7801, 7800)
# Sort the numbers
(sorted_numbers <- sort(numbers))
# Calculate the range between consecutive numbers
(ranges <- diff(sorted_numbers))
# Find the indices of numbers with ranges greater than 1000
(potential_outliers_indices <- which(ranges > 1000))
# Initialize an empty vector to store potential outliers
(potential_outliers <- numeric(0))
# Iterate through potential outlier indices
for (i in potential_outliers_indices) {
# Calculate the lower and upper bounds for potential outliers
(lower_bound <- sorted_numbers[i] - 1.5 * IQR(sorted_numbers))
(upper_bound <- sorted_numbers[i] + 1.5 * IQR(sorted_numbers))
# Check if any number within the range is an outlier
within_range <- sorted_numbers >= lower_bound & sorted_numbers <= upper_bound
outliers_within_range <- sorted_numbers[within_range]
# Add outliers within range to the potential outliers vector
potential_outliers <- c(potential_outliers, outliers_within_range)
}
# Iterate through potential outlier indices
for (i in potential_outliers_indices) {
# Calculate the lower and upper bounds for potential outliers
(lower_bound <- sorted_numbers[i] - 1.5 * IQR(sorted_numbers))
(upper_bound <- sorted_numbers[i] + 1.5 * IQR(sorted_numbers))
# Check if any number within the range is an outlier
within_range <- sorted_numbers >= lower_bound & sorted_numbers <= upper_bound
outliers_within_range <- sorted_numbers[within_range]
# Add outliers within range to the potential outliers vector
potential_outliers <- c(potential_outliers, outliers_within_range)
}
numbers <- c(7801, 7800)
# Sort the numbers
(sorted_numbers <- sort(numbers))
# Calculate the range between consecutive numbers
(ranges <- diff(sorted_numbers))
if (ranges < 1000){
outlier_upper <- FALSE
} else {
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
(outlier_upper <- numbers > upper_bound)
}
print(outlier_upper)
numbers <- c(0, 0, 89678, 5600)
# Sort the numbers
(sorted_numbers <- sort(numbers))
# Calculate the range between consecutive numbers
(ranges <- diff(sorted_numbers))
if (ranges < 1000){
outlier_upper <- FALSE
} else {
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
outlier_upper <- numbers > upper_bound
}
numbers <- c(0, 0, 89678, 5600)
# Sort the numbers
(sorted_numbers <- sort(numbers))
# Calculate the range between consecutive numbers
(ranges <- diff(sorted_numbers))
if (abs(ranges < 1000)){
outlier_upper <- FALSE
} else {
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
outlier_upper <- numbers > upper_bound
}
if (any(ranges < 1000)){
outlier_upper <- FALSE
} else {
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
outlier_upper <- numbers > upper_bound
}
print(outlier_upper)
numbers <- c(0, 0, 89678, 5600)
# Sort the numbers
(sorted_numbers <- sort(numbers))
# Calculate the range between consecutive numbers
(ranges <- diff(sorted_numbers))
if (any(ranges < 1000)){
outlier_upper <- FALSE
} else {
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
outlier_upper <- numbers > upper_bound
}
print(outlier_upper)
numbers <- c(0, 0, 89678, 5600)
# Sort the numbers
(sorted_numbers <- sort(numbers))
# Calculate the range between consecutive numbers
(ranges <- diff(sorted_numbers))
if (ranges > 1000){
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
outlier_upper <- numbers > upper_bound
} else {
outlier_upper <- FALSE
}
if (any(ranges > 1000)){
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
outlier_upper <- numbers > upper_bound
} else {
outlier_upper <- FALSE
}
print(outlier_upper)
numbers <- c(0, 0, 7801,7800)
# Sort the numbers
(sorted_numbers <- sort(numbers))
# Calculate the range between consecutive numbers
(ranges <- diff(sorted_numbers))
if (any(ranges > 1000)){
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
outlier_upper <- numbers > upper_bound
} else {
outlier_upper <- FALSE
}
print(outlier_upper)
q1 <- quantile(numbers, 0.25)
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
upper_bound_2 <- abs(q3 - 0.5* iqr)
(outlier_upper <- numbers > upper_bound)
(outlier_upper_2 <- numbers > upper_bound_2)
q1 <- quantile(numbers, 0.25)
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
upper_bound_2 <- abs(q3 - 0.5* iqr)
((outlier_upper <- numbers > upper_bound))
# Sort the numbers
(sorted_numbers <- sort(numbers))
# Calculate the range between consecutive numbers
(ranges <- diff(sorted_numbers))
if (any(ranges > 1000)){
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
outlier_upper <- numbers > upper_bound
} else {
outlier_upper <- FALSE
}
print(outlier_upper)
numbers <- c(7801,7800)
# Sort the numbers
(sorted_numbers <- sort(numbers))
# Calculate the range between consecutive numbers
(ranges <- diff(sorted_numbers))
if (any(ranges > 1000)){
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
outlier_upper <- numbers > upper_bound
} else {
outlier_upper <- FALSE
}
print(outlier_upper)
numbers <- c(7801,7800, 80000, 6700)
# Sort the numbers
(sorted_numbers <- sort(numbers))
# Calculate the range between consecutive numbers
(ranges <- diff(sorted_numbers))
if (any(ranges > 1000)){
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
outlier_upper <- numbers > upper_bound
} else {
outlier_upper <- FALSE
}
print(outlier_upper)
numbers <- c(7801,7800, 6700)
# Sort the numbers
(sorted_numbers <- sort(numbers))
# Calculate the range between consecutive numbers
(ranges <- diff(sorted_numbers))
if (any(ranges > 1000)){
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
outlier_upper <- numbers > upper_bound
} else {
outlier_upper <- FALSE
}
print(outlier_upper)
numbers <- c(0, 1, 1000, 10000, 100000)
# Sort the numbers
(sorted_numbers <- sort(numbers))
# Calculate the range between consecutive numbers
(ranges <- diff(sorted_numbers))
if (any(ranges > 1000)){
q3 <- quantile(numbers, 0.75)
lower_bound <- 0
upper_bound <- abs(q3 - 0.5* IQR(numbers))
outlier_upper <- numbers > upper_bound
} else {
outlier_upper <- FALSE
}
print(outlier_upper)
install.packages(c("cli", "digest", "dplyr", "fastmap", "htmltools", "jsonlite", "knitr", "Matrix", "purrr", "ResourceSelection", "rlang", "tibble", "vctrs", "xfun"))
install.packages(c("cli", "digest", "dplyr", "fastmap", "htmltools", "jsonlite", "knitr", "Matrix", "purrr", "ResourceSelection", "rlang", "tibble", "vctrs", "xfun"))
install.packages(c("cli", "digest", "dplyr", "fastmap", "htmltools", "jsonlite", "knitr", "Matrix", "purrr", "ResourceSelection", "rlang", "tibble", "vctrs", "xfun"))
install.packages(c("cli", "digest", "dplyr", "fastmap", "htmltools", "jsonlite", "knitr", "Matrix", "purrr", "ResourceSelection", "rlang", "tibble", "vctrs", "xfun"))
install.packages("tidyverse")
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("tidyverse")
library(tidyr)
install.packages("tidyr")
library(tidyr)
remove.packages("tidyr")
install.packages("tidyr")
library(tidyr)
install.packages("cli")
install.packages("cli")
library(tidyr)
remove.packages("cli")
install.packages("cli")
install.packages("cli")
library(tidyr)
library(tidyr)
install.packages("dplyr")
install.packages("dplyr")
library(tidyr)
library(skimr)
library(dplyr)
library(knitr)
library(ggplot2)
library(corrplot)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
#Added library for kdepairs
library(ResourceSelection)
library(tidyr)
install.packages("tinytex")
tinytex::install_tinytex()
library(tidyr)
library(skimr)
library(dplyr)
library(knitr)
library(ggplot2)
library(corrplot)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
#Added library for kdepairs
library(ResourceSelection)
tabl <- "
| Variable Names         | Definition    					   	 | Theoretical Effect  	   |
|------------------------|:-------------------------------------:|------------------------:|
| INDEX 			     | Identification Variable (do not use)  | None 				   |
| TARGET_WINS 	         | Number of wins |   $12 			     |  					   |
| TEAM_BATTING_H 	     | Base Hits by batters (1B,2B,3B,HR)    | Positive Impact on Wins |
| TEAM_BATTING_2B 	     | Doubles by batters (2B) 				 | Positive Impact on Wins |
| TEAM_BATTING_3B 	     | Triples by batters (3B) 				 | Positive Impact on Wins |
| TEAM_BATTING_HR 	     | Homeruns by batters (4B) 			 | Positive Impact on Wins |
| TEAM_BATTING_BB 	     | Walks by batters 					 | Positive Impact on Wins |
| TEAM_BATTING_HBP	     | Batters hit by pitch (get a free base)| Positive Impact on Wins |
| TEAM_BATTING_SO 	     | Strikeouts by batters 				 | Negative Impact on Wins |
| TEAM_BASERUN_SB 	     | Stolen bases 						 | Positive Impact on Wins |
| TEAM_BASERUN_CS 	     | Caught stealing 						 | Negative Impact on Wins |
| TEAM_FIELDING_E 	     | Errors 								 | Negative Impact on Wins |
| TEAM_FIELDING_DP	     | Double Plays 						 | Positive Impact on Wins |
| TEAM_PITCHING_BB	     | Walks allowed 						 | Negative Impact on Wins |
| TEAM_PITCHING_H 	     | Hits allowed 						 | Negative Impact on Wins |
| TEAM_PITCHING_HR	     | Homeruns allowed 					 | Negative Impact on Wins |
| TEAM_PITCHING_SO	     | Strikeouts by pitchers 			 	 | Positive Impact on Wins |
"
cat(tabl) # output the table in a format good for HTML/PDF/docx conversion
git_url<-
"https://raw.githubusercontent.com/melbow2424/Data621_HW1/main/"
df_train <-
read.csv(paste0(git_url,"moneyball-training-data.csv"))
df_evaluation <-
read.csv(paste0(git_url,"moneyball-evaluation-data.csv"))
print(skim(df_train))
df_train %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
train_means<-sapply(df_train, function(x) round(mean(x, na.rm = TRUE)))
train_means
eval_means<-sapply(df_evaluation, function(x) round(mean(x, na.rm = TRUE)))
eval_means
train_medians<-sapply(df_train, function(x) round(median(x, na.rm = TRUE)))
train_medians
eval_medians<-sapply(df_evaluation, function(x) round(median(x, na.rm = TRUE)))
eval_medians
# Replace NA values in 'column_name' with 'mean'
df_train_mn <- df_train %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
train_means[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
train_means[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
train_means[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
train_means[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
train_means[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
train_means[17], TEAM_FIELDING_DP))
df_train_mn %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_evaluation_mn <- df_evaluation %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
eval_means[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
eval_means[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
eval_means[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
eval_means[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
eval_means[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
eval_means[17], TEAM_FIELDING_DP))
# Replace NA values in 'column_name' with 'median'
df_train_md <- df_train %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
train_medians[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
train_medians[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
train_medians[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
train_medians[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
train_medians[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
train_medians[17], TEAM_FIELDING_DP))
df_train_md %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_evaluation_md <- df_evaluation %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
eval_medians[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
eval_medians[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
eval_medians[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
eval_medians[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
eval_medians[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
eval_medians[17], TEAM_FIELDING_DP))
df_train_0 <- df_train %>%
replace_na(list(
INDEX = 0,
TARGET_WINS = 0,
TEAM_BATTING_H = 0,
TEAM_BATTING_2B = 0,
TEAM_BATTING_3B = 0,
TEAM_BATTING_HR = 0,
TEAM_BATTING_BB = 0,
TEAM_BATTING_SO = 0,
TEAM_BASERUN_SB = 0,
TEAM_BASERUN_CS = 0,
TEAM_BATTING_HBP = 0,
TEAM_PITCHING_H = 0,
TEAM_PITCHING_HR = 0,
TEAM_PITCHING_BB = 0,
TEAM_PITCHING_SO = 0,
TEAM_FIELDING_E = 0,
TEAM_FIELDING_DP = 0
))
df_train_0 %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_evaluation_0 <- df_evaluation %>%
replace_na(list(
INDEX = 0,
TARGET_WINS = 0,
TEAM_BATTING_H = 0,
TEAM_BATTING_2B = 0,
TEAM_BATTING_3B = 0,
TEAM_BATTING_HR = 0,
TEAM_BATTING_BB = 0,
TEAM_BATTING_SO = 0,
TEAM_BASERUN_SB = 0,
TEAM_BASERUN_CS = 0,
TEAM_BATTING_HBP = 0,
TEAM_PITCHING_H = 0,
TEAM_PITCHING_HR = 0,
TEAM_PITCHING_BB = 0,
TEAM_PITCHING_SO = 0,
TEAM_FIELDING_E = 0,
TEAM_FIELDING_DP = 0
))
df_train_rm<- na.omit(df_train)
df_evaluation_rm<- na.omit(df_evaluation)
df_train_rm %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
#print(skim(df_train_mn))
#print(skim(df_train_md))
#print(skim(df_train_0))
df_train_mn %>%
gather(variable, value, TEAM_BATTING_H: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value, y=TARGET_WINS)) + #plotting every variable
geom_point(color = "grey", alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "darkgreen") +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
# df_train_mn %>%
#  select(-INDEX) %>%
#   cor(.,) %>%
#   corrplot(.,method = "ellipse", type = "lower", diag = FALSE)
model_initial <- lm(TARGET_WINS ~ TEAM_BATTING_H+TEAM_BATTING_2B +TEAM_BATTING_3B+TEAM_BATTING_HR+TEAM_BATTING_BB+TEAM_BATTING_SO+
TEAM_BASERUN_SB+ TEAM_BASERUN_CS + TEAM_BATTING_HBP +TEAM_PITCHING_H+ TEAM_PITCHING_HR+TEAM_PITCHING_BB+TEAM_PITCHING_SO+TEAM_FIELDING_E+ TEAM_FIELDING_DP, data = df_train)
summary(model_initial)
# Fit a multiple linear regression model using lm with variables imputed:mean
model_mn <- lm(TARGET_WINS ~ ., data = df_train_mn)
# Summary of the regression model
summary(model_mn)$adj.r.squared
# Fit a multiple linear regression model using lm with variables imputed:median
model_md <- lm(TARGET_WINS ~ ., data = df_train_md)
# Summary of the regression model
summary(model_md)$adj.r.squared
# Fit a multiple linear regression model using lm with variables imputed:zero
model_0 <- lm(TARGET_WINS ~ ., data = df_train_0)
# Summary of the regression model
summary(model_0)$adj.r.squared
# Fit a multiple linear regression model using lm with variables: removed
model_rm <- lm(TARGET_WINS ~ ., data = df_train_rm)
# Summary of the regression model
summary(model_rm)$adj.r.squared
# Create a subset that includes all columns
all_columns_subset <- df_train_rm[, ]
kdepairs(all_columns_subset)
#Also tried to minus it as well. Did not work.(delete later)
#Creating new data set with combined correlated variables and removed correlated variables
df_train_with_combo <- df_train_rm %>%
mutate(team_H = TEAM_BATTING_H + TEAM_PITCHING_H,
team_HR = TEAM_BATTING_HR + TEAM_PITCHING_HR,
team_BB = TEAM_BATTING_BB + TEAM_PITCHING_BB,
team_SO = TEAM_BATTING_SO + TEAM_PITCHING_SO)%>%
select(-TEAM_BATTING_H, -TEAM_PITCHING_H, -TEAM_BATTING_HR, -TEAM_PITCHING_HR, -TEAM_BATTING_BB,-TEAM_PITCHING_BB,
-TEAM_BATTING_SO,- TEAM_PITCHING_SO)
# Fit a multiple linear regression model using lm with variables: removed
model_combo <- lm(TARGET_WINS ~ ., data = df_train_with_combo)
# Summary of the regression model
summary(model_combo)$adj.r.squared
# Create a subset that includes all columns
all_columns_subset <- df_train_with_combo[, ]
kdepairs(all_columns_subset)
model <- lm(TARGET_WINS ~ team_H + team_BB + TEAM_FIELDING_E +TEAM_FIELDING_DP+ team_SO+ team_HR+ TEAM_BATTING_HBP+ TEAM_BATTING_3B +TEAM_BASERUN_SB, data = df_train_with_combo)
summary(model)
tinytex::install_tinytex()
devtools::install_github("yihui/tinytex")
setwd("~/CUNY/Fall 2023/DATA 621 – Business Analytics and Data Mining/Data621_Collab")
devtools::install_github("rstudio/rmarkdown")
tinytex::install_tinytex()
