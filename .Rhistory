ifelse(is.na(TEAM_BATTING_HBP),
eval_medians[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
eval_medians[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
eval_medians[17], TEAM_FIELDING_DP))
df_evaluation_md <- df_evaluation %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
eval_medians[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
eval_medians[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
eval_medians[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
eval_medians[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
eval_medians[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
eval_medians[17], TEAM_FIELDING_DP))
df_train_0 <- df_train %>%
replace_na(list(
INDEX = 0,
TARGET_WINS = 0,
TEAM_BATTING_H = 0,
TEAM_BATTING_2B = 0,
TEAM_BATTING_3B = 0,
TEAM_BATTING_HR = 0,
TEAM_BATTING_BB = 0,
TEAM_BATTING_SO = 0,
TEAM_BASERUN_SB = 0,
TEAM_BASERUN_CS = 0,
TEAM_BATTING_HBP = 0,
TEAM_PITCHING_H = 0,
TEAM_PITCHING_HR = 0,
TEAM_PITCHING_BB = 0,
TEAM_PITCHING_SO = 0,
TEAM_FIELDING_E = 0,
TEAM_FIELDING_DP = 0
))
df_train_0 %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_evaluation_0 <- df_evaluation %>%
replace_na(list(
INDEX = 0,
TARGET_WINS = 0,
TEAM_BATTING_H = 0,
TEAM_BATTING_2B = 0,
TEAM_BATTING_3B = 0,
TEAM_BATTING_HR = 0,
TEAM_BATTING_BB = 0,
TEAM_BATTING_SO = 0,
TEAM_BASERUN_SB = 0,
TEAM_BASERUN_CS = 0,
TEAM_BATTING_HBP = 0,
TEAM_PITCHING_H = 0,
TEAM_PITCHING_HR = 0,
TEAM_PITCHING_BB = 0,
TEAM_PITCHING_SO = 0,
TEAM_FIELDING_E = 0,
TEAM_FIELDING_DP = 0
))
df_train_rm<- na.omit(df_train)
df_evaluation_rm<- na.omit(df_evaluation)
df_train_rm %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_train_mn %>%
gather(variable, value, TEAM_BATTING_H: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value, y=TARGET_WINS)) + #plotting every variable
geom_point(color = "grey", alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "darkgreen") +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_train_mn %>%
select(-INDEX) %>%
cor(.,) %>%
corrplot(.,method = "ellipse", type = "lower", diag = FALSE)
df_train_mn %>%
select(-INDEX) %>%
cor(.,) %>%
corrplot(.,method = "ellipse", type = "lower", diag = FALSE)
model_initial <- lm(TARGET_WINS ~ TEAM_BATTING_H+TEAM_BATTING_2B +TEAM_BATTING_3B+TEAM_BATTING_HR+TEAM_BATTING_BB+TEAM_BATTING_SO+
TEAM_BASERUN_SB+ TEAM_BASERUN_CS + TEAM_BATTING_HBP +TEAM_PITCHING_H+ TEAM_PITCHING_HR+TEAM_PITCHING_BB+TEAM_PITCHING_SO+TEAM_FIELDING_E+ TEAM_FIELDING_DP, data = df_train)
summary(model_initial)
View(df_train)
install.packages("corrplot")
library(tidyr)
library(skimr)
library(dplyr)
library(knitr)
library(ggplot2)
library(corrplot)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(ResourceSelection)
library(tidyverse)
library(matlib)
library(Matrix)
library(matrixcalc)
library(MASS)
train = read.csv('https://raw.githubusercontent.com/melbow2424/Data_605_Final/main/Data/train.csv')
head(train)
summary(train)
# Select the non-categorical variables
non_categorical_vars <- train[, sapply(train, is.numeric)]
# Summarize the non-categorical variables
summary_info <- summary(non_categorical_vars)
# Create a data frame from the summary information
summary_train <- data.frame(
Min = summary_info[1, ],
Q1 = summary_info[2, ],
Median = summary_info[3, ],
Mean = summary_info[4, ],
Q3 = summary_info[5, ],
Max = summary_info[6, ]
)
summary_train
# Keep only specific columns using subset()
df_1 <- subset(train, select = c(SalePrice, HalfBath, GarageArea, OverallQual, YearBuilt, YearRemodAdd, TotalBsmtSF, X1stFlrSF, FullBath, X2ndFlrSF, OverallCond, Fireplaces, BedroomAbvGr))
kdepairs(df_1)
library(tidyr)
library(skimr)
library(dplyr)
library(knitr)
library(ggplot2)
library(corrplot)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
tabl <- "
| Variable Names         | Definition    					   	 | Theoretical Effect  	   |
|------------------------|:-------------------------------------:|------------------------:|
| INDEX 			     | Identification Variable (do not use)  | None 				   |
| TARGET_WINS 	         | Number of wins |   $12 			     |  					   |
| TEAM_BATTING_H 	     | Base Hits by batters (1B,2B,3B,HR)    | Positive Impact on Wins |
| TEAM_BATTING_2B 	     | Doubles by batters (2B) 				 | Positive Impact on Wins |
| TEAM_BATTING_3B 	     | Triples by batters (3B) 				 | Positive Impact on Wins |
| TEAM_BATTING_HR 	     | Homeruns by batters (4B) 			 | Positive Impact on Wins |
| TEAM_BATTING_BB 	     | Walks by batters 					 | Positive Impact on Wins |
| TEAM_BATTING_HBP	     | Batters hit by pitch (get a free base)| Positive Impact on Wins |
| TEAM_BATTING_SO 	     | Strikeouts by batters 				 | Negative Impact on Wins |
| TEAM_BASERUN_SB 	     | Stolen bases 						 | Positive Impact on Wins |
| TEAM_BASERUN_CS 	     | Caught stealing 						 | Negative Impact on Wins |
| TEAM_FIELDING_E 	     | Errors 								 | Negative Impact on Wins |
| TEAM_FIELDING_DP	     | Double Plays 						 | Positive Impact on Wins |
| TEAM_PITCHING_BB	     | Walks allowed 						 | Negative Impact on Wins |
| TEAM_PITCHING_H 	     | Hits allowed 						 | Negative Impact on Wins |
| TEAM_PITCHING_HR	     | Homeruns allowed 					 | Negative Impact on Wins |
| TEAM_PITCHING_SO	     | Strikeouts by pitchers 			 	 | Positive Impact on Wins |
"
cat(tabl) # output the table in a format good for HTML/PDF/docx conversion
git_url<-
"https://raw.githubusercontent.com/melbow2424/Data621_HW1/main/"
df_train <-
read.csv(paste0(git_url,"moneyball-training-data.csv"))
df_evaluation <-
read.csv(paste0(git_url,"moneyball-evaluation-data.csv"))
print(skim(df_train))
print(skim(df_train))
df_train %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
train_means<-sapply(df_train, function(x) round(mean(x, na.rm = TRUE)))
train_means
eval_means<-sapply(df_evaluation, function(x) round(mean(x, na.rm = TRUE)))
eval_means
train_medians<-sapply(df_train, function(x) round(median(x, na.rm = TRUE)))
train_medians
<<<<<<< Updated upstream
eval_medians<-sapply(df_evaluation, function(x) round(median(x, na.rm = TRUE)))
eval_medians
# Replace NA values in 'column_name' with 'mean'
df_train_mn <- df_train %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
train_means[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
train_means[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
train_means[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
train_means[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
train_means[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
train_means[17], TEAM_FIELDING_DP))
df_train_mn %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_evaluation_mn <- df_evaluation %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
eval_means[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
eval_means[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
eval_means[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
eval_means[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
eval_means[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
eval_means[17], TEAM_FIELDING_DP))
# Replace NA values in 'column_name' with 'median'
df_train_md <- df_train %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
train_medians[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
train_medians[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
train_medians[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
train_medians[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
train_medians[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
train_medians[17], TEAM_FIELDING_DP))
# Replace NA values in 'column_name' with 'median'
df_train_md <- df_train %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
train_medians[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
train_medians[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
train_medians[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
train_medians[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
train_medians[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
train_medians[17], TEAM_FIELDING_DP))
df_train_md %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_evaluation_md <- df_evaluation %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
eval_medians[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
eval_medians[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
eval_medians[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
eval_medians[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
eval_medians[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
eval_medians[17], TEAM_FIELDING_DP))
df_evaluation_md <- df_evaluation %>%
mutate(TEAM_BATTING_SO =
ifelse(is.na(TEAM_BATTING_SO),
eval_medians[8],TEAM_BATTING_SO))%>%
mutate(TEAM_BASERUN_SB =
ifelse(is.na(TEAM_BASERUN_SB),
eval_medians[9], TEAM_BASERUN_SB))%>%
mutate(TEAM_BASERUN_CS =
ifelse(is.na(TEAM_BASERUN_CS),
eval_medians[10], TEAM_BASERUN_CS))%>%
mutate(TEAM_BATTING_HBP =
ifelse(is.na(TEAM_BATTING_HBP),
eval_medians[11],TEAM_BATTING_HBP))%>%
mutate(TEAM_PITCHING_SO =
ifelse(is.na(TEAM_PITCHING_SO),
eval_medians[15], TEAM_PITCHING_SO))%>%
mutate(TEAM_FIELDING_DP =
ifelse(is.na(TEAM_FIELDING_DP),
eval_medians[17], TEAM_FIELDING_DP))
df_train_0 <- df_train %>%
replace_na(list(
INDEX = 0,
TARGET_WINS = 0,
TEAM_BATTING_H = 0,
TEAM_BATTING_2B = 0,
TEAM_BATTING_3B = 0,
TEAM_BATTING_HR = 0,
TEAM_BATTING_BB = 0,
TEAM_BATTING_SO = 0,
TEAM_BASERUN_SB = 0,
TEAM_BASERUN_CS = 0,
TEAM_BATTING_HBP = 0,
TEAM_PITCHING_H = 0,
TEAM_PITCHING_HR = 0,
TEAM_PITCHING_BB = 0,
TEAM_PITCHING_SO = 0,
TEAM_FIELDING_E = 0,
TEAM_FIELDING_DP = 0
))
df_train_0 <- df_train %>%
replace_na(list(
INDEX = 0,
TARGET_WINS = 0,
TEAM_BATTING_H = 0,
TEAM_BATTING_2B = 0,
TEAM_BATTING_3B = 0,
TEAM_BATTING_HR = 0,
TEAM_BATTING_BB = 0,
TEAM_BATTING_SO = 0,
TEAM_BASERUN_SB = 0,
TEAM_BASERUN_CS = 0,
TEAM_BATTING_HBP = 0,
TEAM_PITCHING_H = 0,
TEAM_PITCHING_HR = 0,
TEAM_PITCHING_BB = 0,
TEAM_PITCHING_SO = 0,
TEAM_FIELDING_E = 0,
TEAM_FIELDING_DP = 0
))
df_train_0 %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_evaluation_0 <- df_evaluation %>%
replace_na(list(
INDEX = 0,
TARGET_WINS = 0,
TEAM_BATTING_H = 0,
TEAM_BATTING_2B = 0,
TEAM_BATTING_3B = 0,
TEAM_BATTING_HR = 0,
TEAM_BATTING_BB = 0,
TEAM_BATTING_SO = 0,
TEAM_BASERUN_SB = 0,
TEAM_BASERUN_CS = 0,
TEAM_BATTING_HBP = 0,
TEAM_PITCHING_H = 0,
TEAM_PITCHING_HR = 0,
TEAM_PITCHING_BB = 0,
TEAM_PITCHING_SO = 0,
TEAM_FIELDING_E = 0,
TEAM_FIELDING_DP = 0
))
df_evaluation_0 <- df_evaluation %>%
replace_na(list(
INDEX = 0,
TARGET_WINS = 0,
TEAM_BATTING_H = 0,
TEAM_BATTING_2B = 0,
TEAM_BATTING_3B = 0,
TEAM_BATTING_HR = 0,
TEAM_BATTING_BB = 0,
TEAM_BATTING_SO = 0,
TEAM_BASERUN_SB = 0,
TEAM_BASERUN_CS = 0,
TEAM_BATTING_HBP = 0,
TEAM_PITCHING_H = 0,
TEAM_PITCHING_HR = 0,
TEAM_PITCHING_BB = 0,
TEAM_PITCHING_SO = 0,
TEAM_FIELDING_E = 0,
TEAM_FIELDING_DP = 0
))
df_train_rm<- na.omit(df_train)
df_evaluation_rm<- na.omit(df_evaluation)
df_train_rm %>%
gather(variable, value, TARGET_WINS: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_train_mn %>%
gather(variable, value, TEAM_BATTING_H: TEAM_FIELDING_DP)%>% #pivot longer to plot all variables
ggplot(.,aes(x=value, y=TARGET_WINS)) + #plotting every variable
geom_point(color = "grey", alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "darkgreen") +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_train_mn %>%
select(-INDEX) %>%
cor(.,) %>%
corrplot(.,method = "ellipse", type = "lower", diag = FALSE)
model_initial <- lm(TARGET_WINS ~ TEAM_BATTING_H+TEAM_BATTING_2B +TEAM_BATTING_3B+TEAM_BATTING_HR+TEAM_BATTING_BB+TEAM_BATTING_SO+
TEAM_BASERUN_SB+ TEAM_BASERUN_CS + TEAM_BATTING_HBP +TEAM_PITCHING_H+ TEAM_PITCHING_HR+TEAM_PITCHING_BB+TEAM_PITCHING_SO+TEAM_FIELDING_E+ TEAM_FIELDING_DP, data = df_train)
summary(model_initial)
model_initial <- lm(TARGET_WINS ~ TEAM_BATTING_H+TEAM_BATTING_2B +TEAM_BATTING_3B+TEAM_BATTING_HR+TEAM_BATTING_BB+TEAM_BATTING_SO+
TEAM_BASERUN_SB+ TEAM_BASERUN_CS + TEAM_BATTING_HBP +TEAM_PITCHING_H+ TEAM_PITCHING_HR+TEAM_PITCHING_BB+TEAM_PITCHING_SO+TEAM_FIELDING_E+ TEAM_FIELDING_DP, data = df_train_md)
summary(model_initial)
model_initial <- lm(TARGET_WINS ~ TEAM_BATTING_H+TEAM_BATTING_2B +TEAM_BATTING_3B+TEAM_BATTING_HR+TEAM_BATTING_BB+TEAM_BATTING_SO+
TEAM_BASERUN_SB+ TEAM_BASERUN_CS + TEAM_BATTING_HBP +TEAM_PITCHING_H+ TEAM_PITCHING_HR+TEAM_PITCHING_BB+TEAM_PITCHING_SO+TEAM_FIELDING_E+ TEAM_FIELDING_DP, data = df_train_mn)
summary(model_initial)
kdepairs(df_train_md)
library(tidyr)
library(skimr)
library(dplyr)
library(knitr)
library(ggplot2)
library(corrplot)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
#Added library for kdepairs
library(ResourceSelection)
kdepairs(df_train_md)
View(df_train_mn)
# Keep only specific columns using subset()
df_1 <- subset(df_train_md, select = c(TARGET_WINS , TEAM_BATTING_H , TEAM_BATTING_2B , TEAM_BATTING_3B, TEAM_BATTING_HR , TEAM_BATTING_BB, TEAM_BATTING_SO , TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_FIELDING_E))
kdepairs()
# Keep only specific columns using subset()
df_1 <- subset(df_train_md, select = c(TARGET_WINS , TEAM_BATTING_H , TEAM_BATTING_2B , TEAM_BATTING_3B, TEAM_BATTING_HR , TEAM_BATTING_BB, TEAM_BATTING_SO , TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_FIELDING_E))
kdepairs(df_1)
# Keep only specific columns using subset()
df_1 <- subset(df_train, select = c(TARGET_WINS , TEAM_BATTING_H , TEAM_BATTING_2B , TEAM_BATTING_3B, TEAM_BATTING_HR , TEAM_BATTING_BB, TEAM_BATTING_SO , TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_FIELDING_E))
kdepairs(df_1)
# Keep only specific columns using subset()
df_1 <- subset(df_train, select = c(TARGET_WINS , TEAM_BATTING_H , TEAM_BATTING_2B , TEAM_BATTING_3B, TEAM_BATTING_HR , TEAM_BATTING_BB, TEAM_BATTING_SO , TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_FIELDING_E))
kdepairs(df_1)
View(df_train)
# Keep only specific columns using subset()
df_1 <- subset(df_train, select = c(TARGET_WINS , TEAM_BATTING_H , TEAM_BATTING_2B , TEAM_BATTING_3B, TEAM_BATTING_HR , TEAM_BATTING_BB, TEAM_BATTING_SO , TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_FIELDING_E))
kdepairs(df_1)
# Keep only specific columns using subset()
df_1 <- subset(df_train_rm, select = c(TARGET_WINS , TEAM_BATTING_H , TEAM_BATTING_2B , TEAM_BATTING_3B, TEAM_BATTING_HR , TEAM_BATTING_BB, TEAM_BATTING_SO , TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_FIELDING_E))
kdepairs(df_1)
# Keep only specific columns using subset()
df_1 <- subset(df_train_0, select = c(TARGET_WINS , TEAM_BATTING_H , TEAM_BATTING_2B , TEAM_BATTING_3B, TEAM_BATTING_HR , TEAM_BATTING_BB, TEAM_BATTING_SO , TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_FIELDING_E))
kdepairs(df_1)
# Keep only specific columns using subset()
kdepairs(df_train_0)
model_initial <- lm(TARGET_WINS ~ TEAM_BATTING_H+TEAM_BATTING_2B +TEAM_BATTING_3B+TEAM_BATTING_HR+TEAM_BATTING_BB+TEAM_BATTING_SO+
TEAM_BASERUN_SB+ TEAM_BASERUN_CS + TEAM_BATTING_HBP +TEAM_PITCHING_H+ TEAM_PITCHING_HR+TEAM_PITCHING_BB+TEAM_PITCHING_SO+TEAM_FIELDING_E+ TEAM_FIELDING_DP, data = df_train_0)
summary(model_initial)
model_initial <- lm(TARGET_WINS ~ TEAM_BATTING_H+TEAM_BATTING_2B +TEAM_BATTING_3B+TEAM_BATTING_HR+TEAM_BATTING_BB+TEAM_BATTING_SO+
TEAM_BASERUN_SB+ TEAM_BASERUN_CS + TEAM_BATTING_HBP +TEAM_PITCHING_H+ TEAM_PITCHING_HR+TEAM_PITCHING_BB+TEAM_PITCHING_SO+TEAM_FIELDING_E+ TEAM_FIELDING_DP, data = df_train_mn)
summary(model_initial)
model_initial <- lm(TARGET_WINS ~ TEAM_BATTING_H+TEAM_BATTING_2B +TEAM_BATTING_3B+TEAM_BATTING_HR+TEAM_BATTING_BB+TEAM_BATTING_SO+
TEAM_BASERUN_SB+ TEAM_BASERUN_CS + TEAM_BATTING_HBP +TEAM_PITCHING_H+ TEAM_PITCHING_HR+TEAM_PITCHING_BB+TEAM_PITCHING_SO+TEAM_FIELDING_E+ TEAM_FIELDING_DP, data = df_train_rm)
summary(model_initial)
# Keep only specific columns using subset()
df_1 <- subset(df_train_0, select = c(TARGET_WINS , TEAM_BATTING_H , TEAM_BATTING_2B , TEAM_BATTING_3B, TEAM_BATTING_HR , TEAM_BATTING_BB, TEAM_BATTING_SO , TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_FIELDING_E))
kdepairs(df_train_0)
# Keep only specific columns using subset()
df_1 <- subset(df_train_0, select = c(TARGET_WINS , TEAM_BATTING_H , TEAM_BATTING_2B , TEAM_BATTING_3B, TEAM_BATTING_HR , TEAM_BATTING_BB, TEAM_BATTING_SO , TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_FIELDING_E))
kdepairs(df_train_0)
# Keep only specific columns using subset()
df_1 <- subset(df_train_0, select = c(TARGET_WINS , TEAM_BATTING_H , TEAM_BATTING_2B , TEAM_BATTING_3B, TEAM_BATTING_HR , TEAM_BATTING_BB, TEAM_BATTING_SO , TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_FIELDING_E))
kdepairs(df_1)
# Keep only specific columns using subset()
df_1 <- subset(df_train_0, select = c(TARGET_WINS, TEAM_BATTING_H, TEAM_BATTING_2B, TEAM_BATTING_3B, TEAM_BATTING_HR, TEAM_BATTING_BB, TEAM_BATTING_SO, TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_BATTING_HBP, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_PITCHING_SO, TEAM_FIELDING_E, TEAM_FIELDING_DP))
kdepairs(df_1)
# Keep only specific columns using subset()
df_1 <- subset(df_train_0, select = c(TARGET_WINS, TEAM_BATTING_H, TEAM_BATTING_2B, TEAM_BATTING_3B, TEAM_BATTING_HR, TEAM_BATTING_BB, TEAM_BATTING_SO, TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_BATTING_HBP, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_PITCHING_SO))
kdepairs(df_1)
# Keep only specific columns using subset()
df_1 <- subset(df_train_0, select = c(TARGET_WINS, TEAM_BATTING_H, TEAM_BATTING_2B, TEAM_BATTING_3B, TEAM_BATTING_HR, TEAM_BATTING_BB, TEAM_BATTING_SO, TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_BATTING_HBP, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB))
kdepairs(df_1)
# Keep only specific columns using subset()
df_1 <- subset(df_train_0, select = c(TARGET_WINS, TEAM_BATTING_H, TEAM_BATTING_2B, TEAM_BATTING_3B, TEAM_BATTING_HR, TEAM_BATTING_BB, TEAM_BATTING_SO, TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_BATTING_HBP, TEAM_PITCHING_H, TEAM_PITCHING_HR))
kdepairs(df_1)
# Keep only specific columns using subset()
df_1 <- subset(df_train_0, select = c(TARGET_WINS, TEAM_BATTING_H, TEAM_BATTING_2B, TEAM_BATTING_3B, TEAM_BATTING_HR, TEAM_BATTING_BB, TEAM_BATTING_SO, TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_BATTING_HBP, TEAM_PITCHING_H))
kdepairs(df_1)
# Keep only specific columns using subset()
df_1 <- subset(df_train_0, select = c(TARGET_WINS, TEAM_BATTING_H, TEAM_BATTING_2B, TEAM_BATTING_3B, TEAM_BATTING_HR, TEAM_BATTING_BB, TEAM_BATTING_SO, TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_BATTING_HBP))
kdepairs(df_1)
# Keep only specific columns using subset()
df_1 <- subset(df_train_0, select = c(TARGET_WINS , TEAM_BATTING_H , TEAM_BATTING_2B , TEAM_BATTING_3B, TEAM_BATTING_HR , TEAM_BATTING_BB, TEAM_BATTING_SO , TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_FIELDING_E))
kdepairs(df_1)
# Keep only specific columns using subset()
df_1 <- subset(df_train_rm, select = c(TARGET_WINS , TEAM_BATTING_H , TEAM_BATTING_2B , TEAM_BATTING_3B, TEAM_BATTING_HR , TEAM_BATTING_BB, TEAM_BATTING_SO , TEAM_BASERUN_SB, TEAM_BASERUN_CS, TEAM_PITCHING_H, TEAM_PITCHING_HR, TEAM_PITCHING_BB, TEAM_FIELDING_E))
kdepairs(df_1)
model_initial <- lm(TARGET_WINS ~ TEAM_BATTING_H+TEAM_BATTING_2B +TEAM_BATTING_3B+TEAM_BATTING_HR+TEAM_BATTING_BB+TEAM_BATTING_SO+
TEAM_BASERUN_SB+ TEAM_BASERUN_CS + TEAM_BATTING_HBP +TEAM_PITCHING_H+ TEAM_PITCHING_HR+TEAM_PITCHING_BB+TEAM_PITCHING_SO+TEAM_FIELDING_E+ TEAM_FIELDING_DP, data = df_train_mn)
summary(model_initial)
=======
library(ResourceSelection)
library(tidyverse)
library(matlib)
library(Matrix)
library(matrixcalc)
library(MASS)
train = read.csv('https://raw.githubusercontent.com/melbow2424/Data_605_Final/main/Data/train.csv')
head(train)
summary(train)
# Select the non-categorical variables
non_categorical_vars <- train[, sapply(train, is.numeric)]
# Summarize the non-categorical variables
summary_info <- summary(non_categorical_vars)
# Create a data frame from the summary information
summary_train <- data.frame(
Min = summary_info[1, ],
Q1 = summary_info[2, ],
Median = summary_info[3, ],
Mean = summary_info[4, ],
Q3 = summary_info[5, ],
Max = summary_info[6, ]
)
summary_train
# Select the non-categorical variables
non_categorical_vars <- train[, sapply(train, is.numeric)]
# Summarize the non-categorical variables
summary_info <- summary(non_categorical_vars)
# Create a data frame from the summary information
summary_train <- data.frame(
Min = summary_info[1, ],
Q1 = summary_info[2, ],
Median = summary_info[3, ],
Mean = summary_info[4, ],
Q3 = summary_info[5, ],
Max = summary_info[6, ]
)
summary_train
# Keep only specific columns using subset()
df_1 <- subset(train, select = c(SalePrice, HalfBath, GarageArea, OverallQual, YearBuilt, YearRemodAdd, TotalBsmtSF, X1stFlrSF, FullBath, X2ndFlrSF, OverallCond, Fireplaces, BedroomAbvGr))
kdepairs(df_1)
>>>>>>> Stashed changes
