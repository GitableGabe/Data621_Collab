labs(title = "WINS BY TEAM HR (COMBINED)",
x="TEAM HR (COMBINED)", y="WINS") +
theme_bw()
p5 <- df_train_with_combo %>%
ggplot(aes(y=TARGET_WINS, x=TEAM_FIELDING_E)) +
geom_point(color="darkgreen") +
geom_smooth(method = "lm", se=TRUE) +
labs(title = "WINS BY TEAM FIELDING E",
x="TEAM FIELDING E", y="WINS") +
theme_bw()
p6 <- df_train_with_combo %>%
ggplot(aes(y=TARGET_WINS, x=TEAM_FIELDING_DP)) +
geom_point(color="darkgreen") +
geom_smooth(method = "lm", se=TRUE) +
labs(title = "WINS BY TEAM FIELDING DP",
x="TEAM FIELDING DP", y="WINS") +
theme_bw()
library(gridExtra)
grid.arrange(p1, p2, p3, p4, p5, p6, nrow=3)
tabl <- "
| Variable Names         | Definition    					   	 | Theoretical Effect  	   |
|------------------------|:-------------------------------------:|------------------------:|
| INDEX 			     | Identification Variable (do not use)  | None 				   |
| TARGET_WINS 	         | Number of wins |      			     |  					   |
| TEAM_BATTING_H 	     | Base Hits by batters (1B,2B,3B,HR)    | Positive Impact on Wins |
| TEAM_BATTING_2B 	     | Doubles by batters (2B) 				 | Positive Impact on Wins |
| TEAM_BATTING_3B 	     | Triples by batters (3B) 				 | Positive Impact on Wins |
| TEAM_BATTING_HR 	     | Homeruns by batters (4B) 			 | Positive Impact on Wins |
| TEAM_BATTING_BB 	     | Walks by batters 					 | Positive Impact on Wins |
| TEAM_BATTING_HBP	     | Batters hit by pitch (get a free base)| Positive Impact on Wins |
| TEAM_BATTING_SO 	     | Strikeouts by batters 				 | Negative Impact on Wins |
| TEAM_BASERUN_SB 	     | Stolen bases 						 | Positive Impact on Wins |
| TEAM_BASERUN_CS 	     | Caught stealing 						 | Negative Impact on Wins |
| TEAM_FIELDING_E 	     | Errors 								 | Negative Impact on Wins |
| TEAM_FIELDING_DP	     | Double Plays 						 | Positive Impact on Wins |
| TEAM_PITCHING_BB	     | Walks allowed 						 | Negative Impact on Wins |
| TEAM_PITCHING_H 	     | Hits allowed 						 | Negative Impact on Wins |
| TEAM_PITCHING_HR	     | Homeruns allowed 					 | Negative Impact on Wins |
| TEAM_PITCHING_SO	     | Strikeouts by pitchers 			 	 | Positive Impact on Wins |
"
cat(tabl) # output the table in a format good for HTML/PDF/docx conversion
library(tidyr)
library(skimr)
library(dplyr)
library(stringr)
library(knitr)
library(ggplot2)
library(corrplot)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Added library for kdepairs
library(ResourceSelection)
git_url<-
"https://raw.githubusercontent.com/melbow2424/Data621_HW1/main/"
df_train <-
read.csv(paste0(git_url,"moneyball-training-data.csv"))
tabl <- "
| Variable Names         | Definition    					   	 | Theoretical Effect  	   |
|------------------------|:-------------------------------------:|------------------------:|
| INDEX 			     | Identification Variable (do not use)  | None 				   |
| TARGET_WINS 	         | Number of wins |      			     |  					   |
| TEAM_BATTING_H 	     | Base Hits by batters (1B,2B,3B,HR)    | Positive Impact on Wins |
| TEAM_BATTING_2B 	     | Doubles by batters (2B) 				 | Positive Impact on Wins |
| TEAM_BATTING_3B 	     | Triples by batters (3B) 				 | Positive Impact on Wins |
| TEAM_BATTING_HR 	     | Homeruns by batters (4B) 			 | Positive Impact on Wins |
| TEAM_BATTING_BB 	     | Walks by batters 					 | Positive Impact on Wins |
| TEAM_BATTING_HBP	     | Batters hit by pitch (get a free base)| Positive Impact on Wins |
| TEAM_BATTING_SO 	     | Strikeouts by batters 				 | Negative Impact on Wins |
| TEAM_BASERUN_SB 	     | Stolen bases 						 | Positive Impact on Wins |
| TEAM_BASERUN_CS 	     | Caught stealing 						 | Negative Impact on Wins |
| TEAM_FIELDING_E 	     | Errors 								 | Negative Impact on Wins |
| TEAM_FIELDING_DP	     | Double Plays 						 | Positive Impact on Wins |
| TEAM_PITCHING_BB	     | Walks allowed 						 | Negative Impact on Wins |
| TEAM_PITCHING_H 	     | Hits allowed 						 | Negative Impact on Wins |
| TEAM_PITCHING_HR	     | Homeruns allowed 					 | Negative Impact on Wins |
| TEAM_PITCHING_SO	     | Strikeouts by pitchers 			 	 | Positive Impact on Wins |
"
cat(tabl) # output the table in a format good for HTML/PDF/docx conversion
library(tidyr)
library(skimr)
library(dplyr)
library(stringr)
library(knitr)
library(ggplot2)
library(corrplot)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Added library for kdepairs
library(ResourceSelection)
git_url<-
"https://raw.githubusercontent.com/melbow2424/Data621_HW1/main/"
df_train <-
read.csv(paste0(git_url,"moneyball-training-data.csv"))
df_evaluation <-
read.csv(paste0(git_url,"moneyball-evaluation-data.csv"))
# Remove TEAM_ prefix from column names
df_train <-
rename(df_train,
"BATTING_HITS"="TEAM_BATTING_H", "BATTING_2B"="TEAM_BATTING_2B",
"BATTING_3B"="TEAM_BATTING_3B", "BATTING_HR"="TEAM_BATTING_HR",
"BATTING_BB"="TEAM_BATTING_BB", "BASERUN_SB"="TEAM_BASERUN_SB",
"BASERUN_CS"="TEAM_BASERUN_CS", "BATTING_HBP"="TEAM_BATTING_HBP",
"PITCHING_HITS"="TEAM_PITCHING_H", "PITCHING_HR"="TEAM_PITCHING_HR",
"PITCHING_BB"="TEAM_PITCHING_BB", "FIELD_ERRORS"="TEAM_FIELDING_E",
"FIELD_DBLPLY"="TEAM_FIELDING_DP","BATTING_SO"="TEAM_BATTING_SO",
"PITCHING_SO"="TEAM_PITCHING_SO")
df_evaluation <-
rename(df_evaluation,
"BATTING_HITS"="TEAM_BATTING_H", "BATTING_2B"="TEAM_BATTING_2B",
"BATTING_3B"="TEAM_BATTING_3B", "BATTING_HR"="TEAM_BATTING_HR",
"BATTING_BB"="TEAM_BATTING_BB", "BASERUN_SB"="TEAM_BASERUN_SB",
"BASERUN_CS"="TEAM_BASERUN_CS", "BATTING_HBP"="TEAM_BATTING_HBP",
"PITCHING_HITS"="TEAM_PITCHING_H", "PITCHING_HR"="TEAM_PITCHING_HR",
"PITCHING_BB"="TEAM_PITCHING_BB",  "FIELD_ERRORS"="TEAM_FIELDING_E",
"FIELD_DBLPLY"="TEAM_FIELDING_DP","BATTING_SO"="TEAM_BATTING_SO",
"PITCHING_SO"="TEAM_PITCHING_SO")
# Show variable stats for training dataset
print(skim(df_train))
df_train %>%
#pivot longer to plot all variables
gather(variable, value, TARGET_WINS: FIELD_DBLPLY)%>%
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
cor(df_train, y=df_train$TARGET_WINS)
df_train %>%
#pivot longer to plot all variables
gather(variable, value, BATTING_HITS: FIELD_DBLPLY)%>%
ggplot(.,aes(x=value, y=TARGET_WINS)) + #plotting every variable
geom_point(color = "darkgreen", alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
# Get the Means of columns in Data
train_means<-sapply(df_train, function(x) round(mean(x, na.rm = TRUE)))
# Replace NA values in 'column_name' with 'mean'
df_train_mn <- df_train %>%
mutate(BATTING_SO =
ifelse(is.na(BATTING_SO),
train_means[8],BATTING_SO))%>%
mutate(BASERUN_SB =
ifelse(is.na(BASERUN_SB),
train_means[9], BASERUN_SB))%>%
mutate(BASERUN_CS =
ifelse(is.na(BASERUN_CS),
train_means[10], BASERUN_CS))%>%
mutate(BATTING_HBP =
ifelse(is.na(BATTING_HBP),
train_means[11],BATTING_HBP))%>%
mutate(PITCHING_SO =
ifelse(is.na(PITCHING_SO),
train_means[15], PITCHING_SO))%>%
mutate(FIELD_DBLPLY =
ifelse(is.na(FIELD_DBLPLY),
train_means[17], FIELD_DBLPLY))
# Evaluate histograms
df_train_mn %>%
#pivot longer to plot all variables
gather(variable, value, TARGET_WINS: FIELD_DBLPLY)%>%
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
# Fit a multiple linear regression model using lm with variables imputed:mean
model_mn <- lm(TARGET_WINS ~ BATTING_HITS+BATTING_2B+BATTING_3B+BATTING_HR+
BATTING_BB+BATTING_SO+BASERUN_SB+BASERUN_CS+BATTING_HBP+
PITCHING_HITS+PITCHING_HR+PITCHING_BB+PITCHING_SO+
FIELD_ERRORS+FIELD_DBLPLY, data = df_train_mn)
# Summary of the regression model
summary(model_mn)$adj.r.squared
# Get the Medians of columns in data
train_medians<-sapply(df_train, function(x) round(median(x, na.rm = TRUE)))
# Replace NA values in 'column_name' with 'median'
df_train_md <- df_train %>%
mutate(BATTING_SO =
ifelse(is.na(BATTING_SO),
train_medians[8],BATTING_SO))%>%
mutate(BASERUN_SB =
ifelse(is.na(BASERUN_SB),
train_medians[9], BASERUN_SB))%>%
mutate(BASERUN_CS =
ifelse(is.na(BASERUN_CS),
train_medians[10], BASERUN_CS))%>%
mutate(BATTING_HBP =
ifelse(is.na(BATTING_HBP),
train_medians[11],BATTING_HBP))%>%
mutate(PITCHING_SO =
ifelse(is.na(PITCHING_SO),
train_medians[15], PITCHING_SO))%>%
mutate(FIELD_DBLPLY =
ifelse(is.na(FIELD_DBLPLY),
train_medians[17], FIELD_DBLPLY))
df_train_md %>%
#pivot longer to plot all variables
gather(variable, value, TARGET_WINS: FIELD_DBLPLY)%>%
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
# Fit a multiple linear regression model using lm with variables imputed:median
model_md <- lm(TARGET_WINS ~ BATTING_HITS+BATTING_2B+BATTING_3B+BATTING_HR+
BATTING_BB+BATTING_SO+BASERUN_SB+BASERUN_CS+BATTING_HBP+
PITCHING_HITS+PITCHING_HR+PITCHING_BB+PITCHING_SO+FIELD_ERRORS+
FIELD_DBLPLY, data = df_train_md)
# Summary of the regression model
summary(model_md)$adj.r.squared
# Replace NA values with zero
df_train_0 <- df_train %>%
replace_na( list( INDEX = 0,TARGET_WINS = 0,BATTING_HITS = 0,BATTING_2B = 0,
BATTING_3B = 0,BATTING_HR = 0,BATTING_BB = 0,BATTING_SO = 0,BASERUN_SB = 0,
BASERUN_CS = 0,BATTING_HBP = 0,PITCHING_HITS = 0,PITCHING_HR = 0,
PITCHING_BB = 0,PITCHING_SO = 0,FIELD_ERRORS = 0,FIELD_DBLPLY = 0))
df_train_0 %>%
#pivot longer to plot all variables
gather(variable, value, TARGET_WINS: FIELD_DBLPLY)%>%
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
# Fit a multiple linear regression model using lm with variables imputed:zero
model_0 <- lm(TARGET_WINS ~ BATTING_HITS+BATTING_2B+BATTING_3B+BATTING_HR+
BATTING_BB+BATTING_SO+BASERUN_SB+BASERUN_CS+BATTING_HBP+
PITCHING_HITS+PITCHING_HR+PITCHING_BB+PITCHING_SO+FIELD_ERRORS+
FIELD_DBLPLY,data = df_train_0)
# Summary of the regression model
summary(model_0)$adj.r.squared
# Remove all rows with NA
df_train_rm<- na.omit(df_train)
# Evaluate distributions
df_train_rm %>%
#pivot longer to plot all variables
gather(variable, value, TARGET_WINS: FIELD_DBLPLY)%>%
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "darkgreen", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
# Fit a multiple linear regression model using lm
model_rm <- lm(TARGET_WINS ~ BATTING_HITS+BATTING_2B+BATTING_3B+BATTING_HR+
BATTING_BB+BATTING_SO+BASERUN_SB+BASERUN_CS+BATTING_HBP+
PITCHING_HITS+PITCHING_HR+PITCHING_BB+PITCHING_SO+FIELD_ERRORS+
FIELD_DBLPLY,data = df_train_rm)
# Summary of the regression model
summary(model_rm)$adj.r.squared
# How many values are missing from BATTING_HBP in the evaluation dataset
# that we will need to use our regression model to predict wins for?
print(sum(is.na(df_evaluation$BATTING_HBP)))
df_train_sqrt <- sqrt(df_train_mn)
df_train_sqrt %>%
#pivot longer to plot all variables
gather(variable, value, TARGET_WINS: FIELD_DBLPLY)%>%
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "red", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_train_ratio <- df_train_0 %>%
mutate(Total_Plays = BATTING_HITS + BATTING_BB + BATTING_SO + BATTING_HBP +
BASERUN_SB + BASERUN_CS +
PITCHING_BB + PITCHING_HITS + PITCHING_SO +
FIELD_DBLPLY + FIELD_ERRORS) %>%
### Target_Wins is based on 162 game season
mutate(TARGET_WINS_RATIO = TARGET_WINS/162) %>%
mutate(BATTING_HITS = BATTING_HITS/Total_Plays) %>%
mutate(BATTING_2B = BATTING_2B/Total_Plays) %>%
mutate(BATTING_3B = BATTING_3B/Total_Plays) %>%
mutate(BATTING_HR = BATTING_HR/Total_Plays) %>%
mutate(BATTING_BB = BATTING_BB/Total_Plays) %>%
mutate(BATTING_SO = BATTING_SO/Total_Plays) %>%
mutate(BATTING_HBP = BATTING_HBP/Total_Plays) %>%
mutate(BASERUN_SB = BASERUN_SB/Total_Plays) %>%
mutate(BASERUN_CS = BASERUN_CS/Total_Plays) %>%
mutate(PITCHING_BB = PITCHING_BB/Total_Plays) %>%
mutate(PITCHING_HITS = PITCHING_HITS/Total_Plays) %>%
mutate(PITCHING_HR = PITCHING_HR/Total_Plays) %>%
mutate(PITCHING_SO = PITCHING_SO/Total_Plays) %>%
mutate(FIELD_DBLPLY = FIELD_DBLPLY/Total_Plays) %>%
mutate(FIELD_ERRORS = FIELD_ERRORS/Total_Plays)
df_train_ratio %>%
#pivot longer to plot all variables
gather(variable, value, TARGET_WINS: TARGET_WINS_RATIO)%>%
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "pink", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
model_initial <- lm(TARGET_WINS ~ BATTING_HITS+BATTING_2B +BATTING_3B+
BATTING_HR+BATTING_BB+BATTING_SO+BASERUN_SB+ BASERUN_CS+
BATTING_HBP +PITCHING_HITS+ PITCHING_HR+PITCHING_BB+
PITCHING_SO+FIELD_ERRORS+ FIELD_DBLPLY, data = df_train)
summary(model_initial)
df_train_mn %>%
select(-INDEX) %>%
cor(.,) %>%
corrplot(.,method = "ellipse", type = "lower", diag = FALSE)
summary(model_mn)
model_mn_2 <- lm(TARGET_WINS ~ BATTING_HITS+BATTING_2B+BATTING_BB+BATTING_SO+
BASERUN_SB+BASERUN_CS+FIELD_ERRORS+PITCHING_HR+BATTING_3B+
BATTING_HR ## +BATTING_HBP
+PITCHING_HITS+PITCHING_BB+PITCHING_SO+FIELD_DBLPLY,
data = df_train_mn)
# Summary of the regression model
summary(model_mn_2)
# Creating new data set with combined correlated variables and removed
# correlated variables
df_train_with_combo <- df_train_mn %>%
mutate(team_H = BATTING_HITS + PITCHING_HITS,
team_HR = BATTING_HR + PITCHING_HR,
team_BB = BATTING_BB + PITCHING_BB,
team_SO = BATTING_SO + PITCHING_SO)%>%
select(-BATTING_HITS, -PITCHING_HITS, -BATTING_HR, -PITCHING_HR, -BATTING_BB,
-PITCHING_BB,-BATTING_SO,-BATTING_HBP,- PITCHING_SO)
# Testing this new data set
model_mn_3_combo <- lm(TARGET_WINS ~ BATTING_2B + BATTING_3B
+ BASERUN_SB + BASERUN_CS + FIELD_ERRORS + FIELD_DBLPLY
+ team_H + team_HR + team_BB + team_SO,
data = df_train_with_combo)
# Summary of the regression model
summary(model_mn_3_combo)
# Testing this new data set
model_mn_4_combo <- lm(TARGET_WINS ~ BATTING_2B + BATTING_3B
+ BASERUN_SB + FIELD_ERRORS + FIELD_DBLPLY
+ team_H + team_HR + team_BB + team_SO,
data = df_train_with_combo)
# Summary of the regression model
summary(model_mn_4_combo)
# Create a subset that includes all columns
# all_columns_subset <- df_train_with_combo[, ]
# kdepairs(all_columns_subset)
model_mn_5_combo <- lm(TARGET_WINS ~ team_H + team_BB + FIELD_ERRORS +
FIELD_DBLPLY+ team_SO+ team_HR ##+ BATTING_HBP
+ BATTING_3B +BASERUN_SB, data = df_train_with_combo)
summary(model_mn_5_combo)
# Fit a multiple linear regression model using lm with square root
#transformed variables
model_sqrt_1 <- lm(TARGET_WINS ~ BATTING_HITS+BATTING_2B+BATTING_3B+
BATTING_HR+BATTING_BB+BATTING_SO+BASERUN_SB+
BASERUN_CS+BATTING_HBP+PITCHING_HITS+PITCHING_HR+
PITCHING_BB+PITCHING_SO+FIELD_ERRORS+FIELD_DBLPLY,
data = df_train_sqrt)
# Summary of the regression model
summary(model_sqrt_1)
model_sqrt_2 <- lm(TARGET_WINS ~ BATTING_HITS+BATTING_2B+BATTING_3B+BATTING_HR+
BATTING_BB+BATTING_SO+BASERUN_SB+##BASERUN_CS + BATTING_HBP
+PITCHING_HITS+PITCHING_HR+PITCHING_BB+PITCHING_SO+FIELD_ERRORS,
data = df_train_sqrt)
# Summary of the regression model
summary(model_sqrt_2)
model_sqrt_3 <- lm(TARGET_WINS ~ BATTING_HITS+BATTING_2B+BATTING_3B+
BATTING_SO+BASERUN_SB+##BASERUN_CS + BATTING_HBP
+PITCHING_HITS##+ BATTING_HR + BATTING_BB + PITCHING_HR + PITCHING_BB
+PITCHING_SO+FIELD_ERRORS,
data = df_train_sqrt)
# Summary of the regression model
summary(model_sqrt_3)
model_sqrt_4 <- lm(TARGET_WINS ~ BATTING_HITS+BATTING_2B+BATTING_3B+BATTING_SO+
BASERUN_SB+ ##BASERUN_CS
+ BATTING_HBP+PITCHING_HITS
##+ BATTING_HR + BATTING_BB + PITCHING_HR + PITCHING_BB
+PITCHING_SO+FIELD_ERRORS,
data = df_train_sqrt)
# Summary of the regression model
summary(model_sqrt_4)
# Fit a multiple linear regression model
model_ratio_1 <- lm(TARGET_WINS_RATIO ~ BATTING_HITS+BATTING_2B+BATTING_3B+
BATTING_HR+BATTING_BB+BATTING_SO+BASERUN_SB+
BASERUN_CS+BATTING_HBP+PITCHING_HITS+PITCHING_HR+
PITCHING_BB+PITCHING_SO+FIELD_ERRORS+FIELD_DBLPLY,
data = df_train_ratio)
# Summary of the regression model
summary(model_ratio_1)
# Fit a multiple linear regression model using lm
model_ratio_2 <- lm(TARGET_WINS_RATIO ~ BATTING_HITS+BATTING_2B+BATTING_3B
## +BATTING_HR + FIELD_DBLPLY
+BATTING_BB+BATTING_SO+BASERUN_SB
+BASERUN_CS+BATTING_HBP+PITCHING_HITS+PITCHING_HR+
PITCHING_BB+PITCHING_SO+FIELD_ERRORS,
data = df_train_ratio)
# Summary of the regression model
summary(model_ratio_2)
# Fit a multiple linear regression model using lm
model_ratio_3 <- lm(TARGET_WINS_RATIO ~ BATTING_HITS+BATTING_2B+BATTING_3B
## +BATTING_HR + FIELD_DBLPLY + BATTING_HBP
+BATTING_BB+BATTING_SO+BASERUN_SB
+BASERUN_CS+PITCHING_HITS+PITCHING_HR+PITCHING_BB+
PITCHING_SO+FIELD_ERRORS,
data = df_train_ratio)
# Summary of the regression model
summary(model_ratio_3)
# Fit a multiple linear regression model using lm
model_ratio_4 <- lm(TARGET_WINS_RATIO ~ BATTING_HITS+BATTING_2B+BATTING_3B
## +BATTING_HR + FIELD_DBLPLY + BATTING_HBP
+BATTING_BB+BASERUN_SB
## +BATTING_SO+BASERUN_CS+PITCHING_HITS+PITCHING_HR+PITCHING_BB
+ PITCHING_SO +  FIELD_ERRORS,
data = df_train_ratio)
# Summary of the regression model
summary(model_ratio_4)
summary(model_sqrt_4)
# Save coefficients from Multiple Regression
df_coeff <- as.data.frame(model_sqrt_4$coefficients) %>%
t()
model_summ <-summary(model_sqrt_4)
#calculate MSE
print(mean(model_summ$residuals^2))
p1 <- model_sqrt_4 %>%
ggplot(aes(y=TARGET_WINS, x=BATTING_HITS)) +
geom_point(color="darkgreen") +
geom_smooth(method = "lm", se=TRUE) +
labs(title = "WINS BY BATTING HITS",
x="TOTAL HITS", y="WINS") +
theme_bw()
p2 <- model_sqrt_4 %>%
ggplot(aes(y=TARGET_WINS, x=BATTING_2B)) +
geom_point(color="darkgreen") +
geom_smooth(method = "lm", se=TRUE) +
labs(title = "WINS BY BATTING DOUBLES",
x="DOUBLES HIT", y="WINS") +
theme_bw()
p3 <- model_sqrt_4 %>%
ggplot(aes(y=TARGET_WINS, x=BATTING_3B)) +
geom_point(color="darkgreen") +
geom_smooth(method = "lm", se=TRUE) +
labs(title = "WINS BY BATTING TRIPLES",
x="TRIPLES HIT", y="WINS") +
theme_bw()
p4 <- model_sqrt_4 %>%
ggplot(aes(y=TARGET_WINS, x=BATTING_SO)) +
geom_point(color="darkgreen") +
geom_smooth(method = "lm", se=TRUE) +
labs(title = "WINS BY BATTING STRIKEOUTS",
x="BATTER STRIKEOUTS", y="WINS") +
theme_bw()
p5 <- model_sqrt_4 %>%
ggplot(aes(y=TARGET_WINS, x=BASERUN_SB)) +
geom_point(color="darkgreen") +
geom_smooth(method = "lm", se=TRUE) +
labs(title = "WINS BY BASE RUNNER STOLEN BASES",
x="STOLEN BASES", y="WINS") +
theme_bw()
p6 <- model_sqrt_4 %>%
ggplot(aes(y=TARGET_WINS, x=PITCHING_HITS)) +
geom_point(color="darkgreen") +
geom_smooth(method = "lm", se=TRUE) +
labs(title = "WINS BY HITS OFF PITCHER",
x="TOTAL HITS", y="WINS") +
theme_bw()
p7 <- model_sqrt_4 %>%
ggplot(aes(y=TARGET_WINS, x=PITCHING_SO)) +
geom_point(color="darkgreen") +
geom_smooth(method = "lm", se=TRUE) +
labs(title = "WINS BY PITCHER STRIKEOUTS",
x="PITCHER STRIEKOUTS", y="WINS") +
theme_bw()
p8 <- model_sqrt_4 %>%
ggplot(aes(y=TARGET_WINS, x=FIELD_ERRORS)) +
geom_point(color="darkgreen") +
geom_smooth(method = "lm", se=TRUE) +
labs(title = "WINS BY FIELDING ERRORS",
x="FIELD ERRORS", y="WINS") +
theme_bw()
library(gridExtra)
grid.arrange(p1, p2, p3, p4, p5, p6, p7,p8, nrow=2)
ggplot(data=model_sqrt_4, aes(model_sqrt_4$residuals)) +
geom_histogram(binwidth = 1, color = "black", fill = "purple4") +
theme(panel.background = element_rect(fill = "white"),
axis.line.x=element_line(),
axis.line.y=element_line()) +
ggtitle("Histogram for Model Residuals")
par(mfrow = c(2, 2))
plot(model_sqrt_4)
print(skim(df_evaluation))
# Get the Means of columns in Data
evaluation_means<-sapply(df_evaluation, function(x) round(mean(x, na.rm =TRUE)))
# Replace NA values in 'column_name' with 'mean'
df_evaluation_mn <- df_evaluation %>%
mutate(BATTING_SO =
ifelse(is.na(BATTING_SO),
evaluation_means[8],BATTING_SO))%>%
mutate(BASERUN_SB =
ifelse(is.na(BASERUN_SB),
evaluation_means[9], BASERUN_SB))%>%
mutate(BASERUN_CS =
ifelse(is.na(BASERUN_CS),
evaluation_means[10], BASERUN_CS))%>%
mutate(BATTING_HBP =
ifelse(is.na(BATTING_HBP),
evaluation_means[11],BATTING_HBP))%>%
mutate(PITCHING_SO =
ifelse(is.na(PITCHING_SO),
evaluation_means[15], PITCHING_SO))%>%
mutate(FIELD_DBLPLY =
ifelse(is.na(FIELD_DBLPLY),
evaluation_means[17], FIELD_DBLPLY))
df_evaluation_sqrt <- sqrt(df_evaluation_mn)
df_evaluation_sqrt %>%
#pivot longer to plot all variables
gather(variable, value, BATTING_HITS: FIELD_DBLPLY)%>%
ggplot(.,aes(x=value)) + #plotting every variable
geom_density(fill = "purple", alpha = 0.5) +
facet_wrap(~ variable, scales = "free", ncol = 4) +
theme_classic()
df_evaluation_sqrt$PREDICT_WINS_sqrt =
predict(model_sqrt_4, new = df_evaluation_sqrt)
df_evaluation_sqrt$PREDICT_WINS =
(df_evaluation_sqrt$PREDICT_WINS_sqrt)*(df_evaluation_sqrt$PREDICT_WINS_sqrt)
git_url<-
"https://raw.githubusercontent.com/GitableGabe/Data621_Data/main/"
df_classif <-
read.csv(paste0(git_url,"classification-output-data.csv"))
git_url<-
"https://raw.githubusercontent.com/GitableGabe/Data621_Data/main/"
df_classif <-
read.csv(paste0(git_url,"classification-output-data.csv"))
